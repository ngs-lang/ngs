#!/usr/bin/env ngs
{

	# Autoload
	AWS
	AWS2
	ArgvMatcher
	DelimStr
	Doc
	Iter
	MaybeFile
	Res
	ResDef
	Set
	Stats
	Table
	Table2
	Thread
	test
	tr

	# TODO: Do not list all types on the namespace page,
	# just up to TYPES_THRESHOLD, probably the parents.
	TYPES_THRESHOLD = 10
	g = globals()

	# TODO: types trees pages

	global code

	doc Security implications. Not to expose possible secrets (such as AWS_...)
	doc Do not remove unless you have alternative solution.
	F code(e)  {
		guard e === ENV
		'ENV'
	}

	F main(doc_root:Str) {

		global init, Str, Bool, ([]=)

		DocPart = Doc::Part
		DocNode = Doc::Node
		DocText = Doc::Text
		DocGroup = Doc::Group

		commit = `line: git rev-parse HEAD`
		pfx = Pfx(realpath('../lib'))
		github_user = ENV.get('NGS_GITHUB_USER', 'ilyash')

		F is_public_name(s:Str) s ~ /^[^_]/
		F is_phased_out_type(s:Str) s ~ Pfx('Aws')

		F is_namespace(x) {
			x is not Hash returns false
			not(object_doc(x)) returns false
			x.keys().all(Int) returns false # STDLIB_FILE_TYPE, possibly others in future
			x.values().any(F(v) v is Type or v is Fun)
		}

		F safe_file_name(s:Str) {
			m = s ~ Sfx('.html')
			sfx = if m {
				s = m.before
				m[0]
			} else {
				''
			}
			s.replace(/(^[.]+)|[^-._a-zA-Z0-9]/, F(char) '%' + encode_hex(char)) + sfx
		}

		F object_meta(x, a:Str) (x.meta() or {}).get(a).Box()
		F object_doc(x) x.object_meta('doc')
		F object_doc_attr(x, a:Str) object_doc(x).filter(a in X).map(X[a]).map(ensure_array)

		obj_to_description = {}

		doc Setting same key twice is a bug. If it happens, augment_types() works on one objects
		doc but other objects are used later.
		F '[]='(h:Hash, k, v) {
			guard h === obj_to_description
			assert(k not in h)
			super(h, k, v)
		}

		type Description

			F href(from:Description, to_path:Arr) {
				from_path = from.path_as_item()
				from_path == to_path returns '#HERE'
				i = 0
				while from_path[i] == to_path[i] {
					i += 1
				}
				ret =
					('../' * (len(from_path) - i - 1)) +
					to_path[i..null].map(safe_file_name).map(encode_uri_component).join('/')
			}

			F href(from:Description, to:Description) href(from, to.path_as_item())

			F fqname(d:Description) fqname(d.containing_nd) +? '::' + d.name


			F get_this_version_desc(d:Description) d.containing_nd.get_this_version_desc()

			F path_as_container_str(d:Description) {
				d.path_as_container().map(safe_file_name).reduce(doc_root, (/))
			}

			F generate_before_children_hook(d:Description) null

			F generate(d:Description) {
				# status("Generating page for descriptors ${d}")
				o = ENV.Box('NGS_DOC_ONLY').map(X.split(','))
				if o {
					if not(o.get().has(d.Type().name)) {
						return
					}
				}

				children = get_children(d)

				if children or (d.path_as_container() == d.path_as_item()[0..-1]) {
					container_dir = d.path_as_container_str()
					status("Ensuring directory $container_dir exists")
					$(mkdir -p $container_dir)
				}

				dst = (d.path_as_item().map(safe_file_name)).reduce(doc_root, (/))
				p = page(d)
				file_content = Doc::HtmlRoot(p)
				status("Writing file=${dst} description=${d} len=${file_content.len()} hash=${file_content.hash()}")
				write(dst, file_content)

				generate_before_children_hook(d)
				children.each(generate)
			}

			F get_children(d:Description) []

			F path_as_item(d:Description) d.containing_nd.path_as_container() + [(if d.name == 'index' then '_index' else d.name) + '.html']
			F path_as_container(d:Description) d.containing_nd.path_as_container() + [d.name]

			F head_fragment(from:Description) {
				\head [
					\meta charset='UTF-8'
					\link rel='stylesheet' href=href(from, from.get_this_version_desc().path_as_container() + ['main.css']) type='text/css'
					\title [ page_title(from) ]
				]
			}

			F nav_name(d:Description) d.name
			F nav_header(d:Description) "auto-generated documentation"

			F nav_header_fragment(d:Description) {
				\div class='header' [
					"NGS version $VERSION ${nav_header(d)}"
				]
			}

			F nav_bottom_fragment(d:Description) {
				\div class='footer' [
					\a href='https://ngs-lang.org/' [ "NGS website" ]
					\br
					\a href='https://github.com/ngs-lang/ngs' [ "NGS on GitHub" ]
				]

			}

			F nav_fragment(d:Description) {
				tvi = d.get_this_version_desc()
				t = d
				ns_nav = \div class='current-nav' [ nav_name(t) ]
				while 'containing_nd' in t {
					t = t.containing_nd
					ns_nav = \div class='parent-namespace-nav' [
						\a href=href(d, t) [ t.nav_name() ]
						ns_nav
					]
				}

				DocGroup() with [
					\nav [
						nav_header_fragment(d)
						\div class='nav-main' [
							\div class='parent-namespace-nav' [
								\a href=href(d, tvi) [ tvi.nav_name() ]
								ns_nav
							]
						]
						nav_bottom_fragment(d)
					]
				]

			}

			F description_fragment(d:Description)
				\section class='description' [
					d.description.map(F(desc) {
						desc.join('\n')
					}).get('Undocumented')
				]

			F example_fragment(d:Description, h='h2') {
				d.example.map(F(ex) {
					\section [
						DocNode(h) with ['Example']
						\pre class='example' title='Example' [
							ex.join('\n')
						]
					]
				})
			}

			F logo_fragment(d:Description) {
				\div class='logo' [
					\img src=href(d, d.get_this_version_desc().path_as_container() + ['ngs-logo-300.png']) alt='NGS logo'
				]
			}

			F page(d:Description) \html [ \body [ "NOT-READY-YET" ] ]

			F Bool(d:Description) true

			F Str(d:Description) "<${d.Type().name} ${d.name}>"


		type ThisVersionIndex(Description)

			F init(tvi:ThisVersionIndex) {
				tvi.docs = collector dir('.').each(F(p) {
					m = p.path ~ /\.md$/
					not(m) returns
					status("Reading ${p}")
					# collect(m.before, ``pandoc -f 'markdown+hard_line_breaks' -t json -s ${p}``)
					collect(MarkdownDescription(tvi, m.before, p))
				})

				status("Building generated documentation descriptors")
				tvi.global_ns = GlobalNamespaceDescription(tvi)

				augment_types()
				augment_methods()

			}

			F nav_header(tvi:ThisVersionIndex) "documentation"
			F nav_name(tvi:ThisVersionIndex) "Documentation index"
			F page_title(tvi:ThisVersionIndex) "Documentation index"
			F path_as_item(tvi:ThisVersionIndex) [Str(VERSION), 'index.html']
			F path_as_container(tvi:ThisVersionIndex) [Str(VERSION)]

			F Str(tvi:ThisVersionIndex) "<${tvi.Type().name} for version ${VERSION}>"

			F get_children(tvi:ThisVersionIndex) {
				tvi.docs + [tvi.global_ns]
			}

			F generate_before_children_hook(tvi:ThisVersionIndex) {
				$(mkdir ${tvi.path_as_container_str() / 'man'})
			}

			F generate(tvi:ThisVersionIndex) {
				super(tvi)
				$(cp main.css "${tvi.path_as_container_str()}/")
				$(cp ../img/ngs-logo-300.png "${tvi.path_as_container_str()}/")
			}

			F get_this_version_desc(tvi:ThisVersionIndex) tvi

			F nav_fragment(tvi:ThisVersionIndex) {
				DocGroup() with [
					nav_header_fragment(tvi)
					\nav [
						\div class='nav-main' [
							\div class='current-nav' [ nav_name(tvi) ]
						]
						nav_bottom_fragment(tvi)
					]
				]
			}

			F page(tvi:ThisVersionIndex) {
				docs_by_type = tvi.docs.group(classify)
				assert_hash_keys(docs_by_type, %[CLI GENERAL])
				\html [
					head_fragment(tvi)
					\body class='version-index-page' [
						nav_fragment(tvi)
						\main [
							logo_fragment(tvi)
							\h1 [ "Documentation index" ]
							\section [ "NGS version ${VERSION}"]
							\h2 [ "Manuals - general" ]
							*docs_by_type.GENERAL.map(index_fragment(tvi, X))
							\h2 [ "Manuals - command line tools" ]
							*docs_by_type.CLI.map(index_fragment(tvi, X))
							\h2 [ "Generated documentation" ]
							index_fragment(tvi, tvi.global_ns)
						]
					]
				]
			}

		F process_markdown_link(s:Str) {
			if m = s ~ /^([a-z.0-9]+)(\.md)$/ {
				return m[1] + '.html'
			}
			s
		}
		F process_markdown_table(h:Hash) {
			# table: 0 - ?, 1 - Alignment, 2 - something about columns?, 3 - ?, 4 - rows
			assert(h.t == 'Table')
			# row: 0 - ?, 1 - cells?
			DocNode('table', class='markdown-table') with h.c[4].the_one()[3].map(F(row) {
				DocNode('tr') with row[1].map(F(cell) {
					# cell: 0 - ?, 1 - Alignment, 2 - RowSpan, 3 - ColSpan, 4 - contents
					DocNode('td') with [ cell[4].the_one().to_doc() ]
				})
			})
		}
		F process_markdown_def_list(h:Hash) {
			DocNode('dl', class='markdown-definitions') with h.c.map(F(d) {
				DocGroup() with [
					DocNode('dt') with d[0].map(to_doc)
					DocNode('dd') with d[1].the_one().map(to_doc)
				]
			})
		}
		MARKDOWN_QUOTES = {
			'DoubleQuote': '"'
			'SingleQuote': "'"
		}
		F to_doc(h:Hash) {
			# Maybe TODO: header .c[1] - href?
			eswitch h.t {
				'Space'           ' '
				'Str'             h.c
				'Para'            DocNode('p') with h.c.map(to_doc)
				'Header'          DocNode('h' + Str(h.c[0] + 1)) with h.c[2].map(to_doc)
				'Strong'          DocNode('strong') with h.c.map(to_doc)
				'Emph'            DocNode('em') with h.c.map(to_doc)
				'LineBreak'       DocNode('br')
				'CodeBlock'       DocNode('pre', class='example') with [ h.c[1] ]
				'Code'            DocNode('code') with [ h.c[1] ]
				'Link'            DocNode('a', href=h.c[2][0].process_markdown_link()) with h.c[1].map(to_doc)
				'BulletList'      DocNode('ul') with h.c.map(F(x) DocNode('li', x.map(to_doc)))
				'Quoted'          DocGroup() with [MARKDOWN_QUOTES[h.c[0].t], *h.c[1].map(to_doc), MARKDOWN_QUOTES[h.c[0].t]]
				'Table'           process_markdown_table(h)
				'DefinitionList'  process_markdown_def_list(h)
				'Plain'           DocGroup() with h.c.map(to_doc)
			}
		}

		type MarkdownDescription(Description)

			F init(md:MarkdownDescription, tvi:ThisVersionIndex, output_name:Str, file_path:Path) {
				init(args())
				md.data = ``pandoc -f 'markdown+hard_line_breaks' -t json -s ${md.file_path}``
				md.doc = DocGroup() with md.data.blocks.map(to_doc)
				md.name_fragment = md.doc.children.filter(DocNode).filter({'name': 'p'})[0].children
			}

			F nav_header(md:MarkdownDescription) "manual"
			F page_title(md:MarkdownDescription) md.data.meta.title.c.map(to_doc).DocGroup()
			F nav_name(md:MarkdownDescription) md.data.meta.title.c.map(to_doc).DocGroup()
			F path_as_item(md:MarkdownDescription) md.tvi.path_as_container() + ['man', md.output_name + '.html']
			F path_as_container(md:MarkdownDescription) md.tvi.path_as_container() + ['MD_CONTAINER_SHOULD_NOT_HAPPEN']

			F get_this_version_desc(md:MarkdownDescription) md.tvi

			F Str(md:MarkdownDescription) "<${md.Type().name} ${md.output_name}>"

			F nav_fragment(md:MarkdownDescription) {
				DocGroup() with [
					nav_header_fragment(md)
					\nav [
						\div class='nav-main' [
							\div class='parent-namespace-nav' [
								\a href=href(md, md.tvi) [ md.tvi.nav_name() ]
								\div class='current-nav' [ nav_name(md) ]
							]
						]
						nav_bottom_fragment(md)
					]
				]
			}

			F index_fragment(indexer:Description, md:MarkdownDescription) {
				\dl [
					\dt [
						\a href=href(indexer, md) [ *md.name_fragment ]
					]
					\dd [
						*md.doc.children.filter(DocNode).filter({'name': 'h2'}).map(F(x) DocNode('span') with x.children).intersperse(', ')
					] # dd
				]
			}

			F page(md:MarkdownDescription) {
				\html [
					head_fragment(md)
					\body class='manual-page' [
						nav_fragment(md)
						\main [
							md.doc
							\h2 [ 'AUTHORS' ]
							DocNode('ul') with md.data.meta.author.c.map(F(author) {
								DocNode('li', author.c.map(to_doc))
							})
							DocNode('div', class='man-page-date') with md.data.meta.date.c.map(to_doc)
						]
					]
				]
			}

			F classify(md:MarkdownDescription) {
				headers = md.doc.children.filter(DocNode).filter({'name': 'h2'}).children.txt.map(X[0])
				%[ SYNOPSIS DESCRIPTION OPTIONS ].all(X in headers) returns 'CLI'
				'GENERAL'
			}

		type NamespaceDescription(Description)

			F init(nd:NamespaceDescription, namespace:Hash) {
				obj_to_description[namespace] = nd
				nd.fqname = nd.fqname()
				nd.description = object_doc_attr(namespace, '')
				nd.example = object_doc_attr(namespace, '%EX')
				# 'ext_links': doc_attr(ns, '%EXTLINK').map(ensure_array)
				# 'methods': ns.filterv(Fun).rejectv(Type).map(F(name, impls) {
				# 	# STDLIB_FILE_TYPE namespace has numbers as keys
				# 	impls = if impls is MultiMethod {
				# 		impls.Arr()
				# 	} else {
				# 		[impls]
				# 	}
				# 	process_method(Str(name), impls.filter(is_in_ns(X, ns)))
				# })
				nd.fields = namespace.meta().Box().get({}).get('doc', {}).without('').reject(X ~ /^%/).mapv(ensure_array)
				nd.objects_descriptions = {}
				nd.objects_by_type = {
					MultiMethodDescription: []
					MethodDescription: []
					TypeDescription: []
					NamespaceDescription: []
				}
				namespaces_and_rest = namespace.Arr().partition(F(kv) is_namespace(kv[1])).map(Hash)
				namespaces_and_rest.reverse().each(F(namespace_part) {

					namespace_part.each(F(k, v) {
						if nd is not GlobalNamespaceDescription and v is Type and g.get(k) === v {
							# Skip global types which are also in a namespace when showing the namespace
							return
						}
						if t = Description(nd, k, v) {
							nd.objects_descriptions[k] = t
							nd.objects_by_type[t.Type()].push(t)
						}
					})
				})
			}

			F init(nd:NamespaceDescription, containing_nd:NamespaceDescription, name:Str, namespace:Hash) {
				init(args())
				super(nd, namespace)
			}

			F get_children(nd:NamespaceDescription) nd.objects_descriptions.values()

			F page_title(nd:NamespaceDescription) "${nd.fqname} namespace - NGS documentation"
			F page_heading(nd:NamespaceDescription) "${nd.fqname} namespace"
			F nav_name(nd:NamespaceDescription) "${nd.name} namespace"

			F index_fragment(indexer:Description, nd:NamespaceDescription) {

				\dl [
					\dt [
						# Dirty hack: or
						\a href=href(indexer, nd)  [nd.fqname or 'The global namespace']
					]
					\dd [
						description_fragment(nd)
						\div class='unobtrusive' [
							{
								'sub-namespaces':     NamespaceDescription
								'types':              TypeDescription
								'multimethods':       MultiMethodDescription
								'top level methods':  MethodDescription
							}.mapv({nd.objects_by_type[A].len()}).filterv(X>0).map("$Y $X").join(', ')
						]
						example_fragment(nd)
					] # dd
				]
			}

			F top_level_types(nd:NamespaceDescription) {
				types = nd.objects_by_type[TypeDescription]
				all_types_count = len(types)
				types .= reject(F(t) {
					t.parents.any(F(p) {
						p.containing_nd === nd
					})
				})
				{
					'types': types
					'hidden': all_types_count - len(types)
				}
			}

			# TODO: MethodDescription (bootstrap_debug for example)
			F page(nd:NamespaceDescription) {
				tlt = top_level_types(nd)
				\html [
					head_fragment(nd)
					\body class='namespace-page' [
						nav_fragment(nd)
						\main [
							\h1 [page_heading(nd)]
							description_fragment(nd)
							example_fragment(nd)
							if nd.objects_by_type[NamespaceDescription] {
								DocGroup() with [
									\h2 ['Sub-namespaces']
									*nd.objects_by_type[NamespaceDescription].map(index_fragment(nd, X))
								]
							}
							if nd.fields {
								\section class='variables-and-other' [
									\h2 [ 'Constants, variables and other' ]
									*nd.fields.map(F(name, desc) {
										\dl [
											\dt [ name ]
											\dd [ desc.join('\n') or '-' ]
										]
									})
								]
							}
							if tlt.types {
								DocGroup() with [
									\h2 ['Types']
									if tlt.hidden {
										\section class='unobtrusive' ["${tlt.hidden} types, which are descendants of types listed below, are not shown for brevity"]
									} else {
										DocGroup()
									}
									*tlt.types.map(index_fragment(nd, X))
								]
							}
							if nd.objects_by_type[MultiMethodDescription] or nd.objects_by_type[MethodDescription] {
								DocGroup() with [
									\h2 ['Methods and Multimethods']
									*nd.objects_by_type[MultiMethodDescription].map(page_fragment(nd, X))
									*nd.objects_by_type[MethodDescription].map(page_fragment(nd, X))
								]
							}
						]
					]
				]
			}

			F Str(nd:NamespaceDescription) {
				"<${nd.Type().name} ${nd.name} with ${nd.objects_descriptions.len()} items>"
			}

		type GlobalNamespaceDescription(NamespaceDescription)

			F fqname(gnd:GlobalNamespaceDescription) ''

			F init(gnd:GlobalNamespaceDescription, this_version_index) {
				gnd.this_version_index = this_version_index
				super(gnd, g.without('main').filterk(is_public_name).rejectk(is_phased_out_type).sortk(lte))
			}

			F get_this_version_desc(gnd:GlobalNamespaceDescription) gnd.this_version_index

			F page_title(gnd:GlobalNamespaceDescription) "The global namespace - NGS documentation"
			F page_heading(gnd:GlobalNamespaceDescription) "The global namespace"
			F nav_name(gnd:GlobalNamespaceDescription) "The global namespace"

			F path_as_item(gnd:GlobalNamespaceDescription) [Str(VERSION), 'generated', 'index.html']
			F path_as_container(gnd:GlobalNamespaceDescription) [Str(VERSION), 'generated']

			F description_fragment(gnd:GlobalNamespaceDescription) 'The main entry point to generated documentation'

			F Str(gnd:GlobalNamespaceDescription) {
				"<${gnd.Type().name} with ${gnd.objects_descriptions.len()} items>"
			}


		type TypeDescription(Description)

			F init(td:TypeDescription, containing_nd:NamespaceDescription, name:Str, type:Type) {
				init(args())
				obj_to_description[type] = td
				td.fqname = fqname(td)
				td.constructors = MultiMethodDescription(containing_nd, name, type.constructors).methods
				td.description = object_doc_attr(type, '')
				td.example = object_doc_attr(type, '%EX')
				td.parents = null
				td.children = []
			}

			F page_title(td:TypeDescription) "${td.fqname} type - NGS documentation"
			F page_heading(td:TypeDescription) "${td.fqname} type"
			F nav_name(td:TypeDescription) "${td.name} type"

			F index_fragment(indexer:Description, td:TypeDescription) {
				alt_name = ' (' +? (if td.name != td.type.name then td.type.name else '') +? ')'
				\dl [
					\dt [
						\a href=href(indexer, td) [td.fqname + alt_name]
					]
					\dd [
						description_fragment(td)
						if td.children {
							\div class='unobtrusive' [
								"Direct subtypes: ${td.children.len()}"
							]
						}
					]
				]
			}

			# TODO: try to display as a table on type pages.
			#       That will make related types visually distinctive from more important
			#       information such as constructors and methods.
			F directly_related_types_fragment(td:TypeDescription, related_types:Arr, rel:Str) {
				if related_types {
					\section [
						\h2 [ "Direct ${rel} types" ]
						*related_types.map(index_fragment(td, X))
					]
				} else {
					DocGroup()
				}

			}

			F page(td:TypeDescription) {
				\html [
					head_fragment(td)
					\body class='type-page' [
						nav_fragment(td)
						\main [
							\h1 [page_heading(td)]
							description_fragment(td)
							example_fragment(td)
							directly_related_types_fragment(td, td.parents, 'parent')
							directly_related_types_fragment(td, td.children, 'children')
							if td.constructors {
								DocGroup() with [
									\h2 [ 'Constructors' ]
									*td.constructors.map(page_fragment(td, X))
								]
							}
							if td.methods {
								DocGroup() with [
									\h2 [ 'Methods' ]
									*td.methods.map(page_fragment(td, X))
								]
							}
						]
					]
				]
			}

		type MultiMethodDescription(Description)

			F init(mmd:MultiMethodDescription, containing_nd:NamespaceDescription, name:Str, multimethod:MultiMethod) {
				init(args())
				obj_to_description[multimethod] = mmd
				mmd.fqname = fqname(mmd)
				mmd.methods = multimethod.Arr().reject(NormalTypeConstructor).map(MethodDescription(containing_nd, name, mmd, X))
				# mmd.methods = multimethod.Arr().map(MethodDescription(containing_nd, name, mmd, X))
			}

			F page_title(mmd:MultiMethodDescription) "${mmd.fqname} multimethod - NGS documentation"
			F page_heading(mmd:MultiMethodDescription) "${mmd.fqname} multimethod"
			F nav_name(mmd:MultiMethodDescription) "${mmd.name} multimethod"

			F index_fragment(indexer:Description, mmd:MultiMethodDescription) {
				\dl [
					\dt [
						\a href=href(indexer, mmd) class='underline-on-hover-only' [
							mmd.fqname
						]
					]
					\dd [
						\section class='unobtrusive' [
							"MultiMethod with ${mmd.methods.len()} methods"
						]
					]
				]
			}

			F index_fragment(indexer:Description, mmd:MultiMethodDescription) {
				guard mmd.methods.len() == 1
				index_fragment(indexer, mmd.methods[0])
			}

			F page_fragment(indexer:NamespaceDescription, mmd:MultiMethodDescription) {
				# echo("INDEXER ${indexer} MMD ${mmd}")
				methods_in_namespace_and_others = mmd.methods.partition(F(x) {
					x.containing_nd === indexer
				})
				DocGroup() with [
					*methods_in_namespace_and_others[0].map(page_fragment(mmd, X))
					if methods_in_namespace_and_others[1] {
						\dl class='unobtrusive' [
							\dt class='method-signature' [
								\a href=href(indexer, mmd) class='underline-on-hover-only' [
									mmd.fqname
								]
							]
							\dd [
								"This multimethod has additional ${methods_in_namespace_and_others[1].len()} method(s) not listed above, defined in other namespace(s)"
							]
						]
					} else {
						DocGroup()
					}
				]
			}

			F page_fragment(indexer:GlobalNamespaceDescription, mmd:MultiMethodDescription) {
				index_fragment(indexer, mmd)
			}

			F page(mmd:MultiMethodDescription) {
				\html [
					head_fragment(mmd)
					\body class='multimethod-page' [
						nav_fragment(mmd)
						\main [
							\h1 [page_heading(mmd)]
							if mmd.methods {
								DocGroup() with [
									\h2 [ 'Methods' ]
									*mmd.methods.map(page_fragment(mmd, X))
								]
							}
						]
					]
				]
			}

		type ParamDescription

			# TODO: link to type?
			F fragment(from:Description, pd:ParamDescription) {
				td = obj_to_description.Box(pd.type)
				\span class='param' [
					pd.splat.get('') + pd.name + ':'
					td.map(F(td) {
						td === from returns td.fqname
						\a href=href(from, td) [td.fqname]
					}).get(pd.type.name)
					pd.dflt.map(F(d) {
						DocGroup() with [
							'='
							ematch d {
								Fun { \span class='non-literal' [ 'method' ] }
								Block { \span class='non-literal' [ 'block' ] }
								Any d.code()
							}
						]
					})
				]
			}


		type MethodDescription(Description)

			F init(md:MethodDescription, method:Fun) {
				obj_to_description[method] = md
				md.fqname = md.mmd.map(fqname).get(md.name)
				md.description = object_doc_attr(method, '')
				md.status = object_doc_attr(method, '%STATUS').get([])
				md.params = method.params().map(F(p) {
					pd = ParamDescription()
					pd.name = p.name
					pd.type = p.get('type', Any)
					if pd.type is not Type {
						# F something(param:PATTERN_HERE)
						# TODO: Improve handling of patterns
						pd.type = {
							'name': pd.type.code()
						}
					}
					pd.dflt = p.Box('dflt')
					pd.splat = p.Box('splat')
					pd.doc = method.object_doc_attr(p.name)
					pd
				})
				md.returns = object_doc_attr(method, '%RET')
				md.example = object_doc_attr(method, '%EX')
				md.auto = object_doc_attr(method, '%AUTO')
				md.source_ref= Box(if method is UserDefinedMethod {
					# Handling UserDefinedMethod, not handling built-ins yet
					location_info = method.ip().resolve_instruction_pointer()
					f = if location_info.file == '<builtin-stdlib>' {
						pfx.val / 'stdlib.ngs'
					} else {
						location_info.file
					}
					if m = f ~ pfx {
						{
							'file': m.after[1..null]
							'line': location_info.first_line
						}
					}
				})
			}


			F init(md:MethodDescription, containing_nd:NamespaceDescription, name:Str, mmd:MultiMethodDescription, method:Fun) {
				init(args())
				md.mmd = FullBox(mmd)
				super(md, method)
			}

			F init(md:MethodDescription, containing_nd:NamespaceDescription, name:Str, method:Fun) {
				init(args())
				md.mmd = EmptyBox()
				super(md, method)
			}

			F index_fragment(indexer:Description, md:MethodDescription) {
				\dl [
					\dt [
						\a href=href(indexer, md) class='underline-on-hover-only' [
							md.fqname
						]
						*md.status.map(F(s) {
							\span class="method-status" [ s ]
						})
					]
					\dd [
						description_fragment(md)
					]
				]
			}

			F page_fragment(indexer:Description, md:MethodDescription) {
				documented_params = md.params.filter({A.doc})
				\dl class='method' [
					\dt [
						\span class='method-signature' [
							md.fqname
							'('
							*md.params.map(fragment(indexer, X)).intersperse(', ')
							')'
							*md.status.map(F(s) {
								\span class="method-status" [ s ]
							})
						]
						md.source_ref.map(F(r) {
							\span class="source-ref" [
								' Source: '
								\a href="https://github.com/${github_user}/ngs/blob/$commit/lib/${r.file}#L${r.line}" [
									"${r.file}:${r.line}"
								]
							]
						})
					]
					\dd [
						description_fragment(md)
						md.auto.map(F(a) {
							\section [
								\h4 [ 'Automatically called by NGS for syntax' ]
								\pre class='auto' title='Usage syntax' [ a[0] ]
							]
						})
						if documented_params {
							\section class='params' [
								\h4 ['Parameters']
								\table class='documented-params' [
									*documented_params.map(F(p) {
										\tr [
											\td [ p.name ]
											\td [ p.doc.map(X.join('\n')).get() ]
										]
									})
								]
							]
						}
						md.returns.map(F(r) {
							\section class='returns' [
								\h4 ['Returns']
								r.join('\n')
							]
						})
						example_fragment(md, 'h4') # Logically h3 but it's too big
					]
				]
			}



		F Description(containing_nd:NamespaceDescription, name:Str, x) {
			if ENV.get('SHOW_IGNORED') {
				warn("Ignoring ${containing_nd} ${x.Type()} ${name}")
			}
			null
		}

		F Description(containing_nd:NamespaceDescription, name:Str, method:Fun) {
			MethodDescription(containing_nd, name, method)
		}

		F Description(containing_nd:NamespaceDescription, name:Str, multimethod:MultiMethod) {
			MultiMethodDescription(containing_nd, name, multimethod)
		}

		F Description(containing_nd:NamespaceDescription, name:Str, t:Type) {
			TypeDescription(containing_nd, name, t)
		}

		F Description(containing_nd:NamespaceDescription, name:Str, maybe_namespace:Hash) {
			not(is_namespace(maybe_namespace)) returns null
			NamespaceDescription(containing_nd, name, maybe_namespace)
		}

		F Description(containing_nd:NamespaceDescription, name:Str, x) {
			guard x in obj_to_description
			obj_to_description[x]
		}

		F augment_types() {
			status("Augmenting types information")

			methods = obj_to_description.values().filter(MethodDescription)
			methods_by_td = {}
			for m in methods {
				m.method.params().reject(X.get('splat')).type.uniq().each(F(t) {
					k = obj_to_description.get(t)
					k is Null returns
					methods_by_td.dflt(obj_to_description[t], []).push(m)
				})
			}

			tds = obj_to_description.values().filter(TypeDescription)

			# .parents
			for t in tds {
				t.parents = t.type.parents.map(obj_to_description[X])
			}

			# .children
			for t in tds {
				t.parents.each(F(p) {
					p.children.push(t)
				})
			}

			# .methods
			for t in tds {
				# TODO: Reject constructors
				constructors = Set(t.constructors)
				t.methods = methods_by_td.get(t, []).reject(X in constructors)
			}

			# # maybe find it in methods variable instead of re-doing process_method_impl()
			# t.constructors = t.type.constructors.Arr().reject(NormalTypeConstructor).register_constructors_mis().map(process_method_impl(t.name, X))
			# t.methods = types_methods[t.type].map(processed_methods[X]).reject({'is_constructor': true})

		}

		# Note that methods in anonymous namespaces will not have corresponding
		# obj_to_description for their 'ns'
		F augment_methods() {
			status("Augmenting methods information")
			methods = obj_to_description.values().filter(MethodDescription)
			for md in methods {
				namespace = md.method.object_meta('ns').map(obj_to_description.get(X)).reject(NoData)
				md.containing_nd = namespace.get(md.containing_nd)
			}
		}

		this_version_index = ThisVersionIndex()

		status("Building site index descriptors")
		this_version_index.generate()

		status("OK")

	}
}
