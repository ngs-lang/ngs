ns {
	# WIP
	# Run with: ngs -e 'require("./lib/shell.ngs")' server
	SOCK_FILE = "ngs-shell.sock"
	PROXY_DIR = Dir(".." / "ngs-web-ui-proxy").assert()
	WEB_SERVER_DIR = Dir(".." / "ngs-web-ui").assert()
	WEB_SERVER_PORT = 52000

	# Temporary name "repr"
	F repr(h:Hash, level:Int=0) collector {
		pfx = '  ' * level
		h.each(F(k, v) {
			if [k, v] =~ ['time', Int] {
				v = "${v} (${v.Time().Str()})"
			}
			if k == 'children' {
				v.each_idx_val(F(i, v) {
					collect("${pfx}  [${i}]")
					repr(v, level + 2).each(collect)
				})
				return
			}
			collect("${pfx}${k} = ${v.SafeStr()}")
		})
	}

	section "Shell Client" {
		type Client()


		type ShellClientDelegate(net::ClientDelegate)

		global on_connect
		F on_connect(scd:ShellClientDelegate, c:net::Connection) {
			debug('client', 'ShellClientDelegate#on_connect()')
			scd.jrc = IO::handlers::JsonRpcClient()
			c.pipeline.push(IO::handlers::Splitter("\n"))
			c.pipeline.push(scd.jrc)
			c.pipeline.fire(IO::events::Active())
		}

		global init
		F init(c:Client) {
			c.last_seen_version = null
			c.last_eval_result = null
			c.scd = ShellClientDelegate()
			c.client = net::UnixStreamClient()
			c.client.connect(SOCK_FILE, c.scd)
		}

		global eval
		F eval(c:Client, cmd:Str) {
			c.last_eval_result = c.scd.jrc.call('eval', [cmd])::{
				debug('client', {"Eval result ${A.SafeStr()}"})
			}
		}

		global poll
		F poll(c:Client, cb:Fun) {
			while true {
				debug('client', "Polling last_seen_version=${c.last_seen_version}")
				p = c.scd.jrc.call('poll', {
					'last_seen_version': c.last_seen_version
				})
				debug('client', "Poll result - timeline (ver. ${p.version})")
				# echo(p.timeline.repr().Lines())
				c.last_seen_version = p.version
				not(cb(p)) returns p
			}
		}
	}

	doc Rudimentary client as phase 1.
	doc Send a command and poll for results.
	doc dua - Default UI action
	F eval(cmd:Str, dua:Arr=[]) {

		# TODO: make this method less verbose by adding functionality to libraries
		type ShellClientDelegate(net::ClientDelegate)
		scd = ShellClientDelegate()
		jrc = IO::handlers::JsonRpcClient()

		global on_connect
		F on_connect(scd:ShellClientDelegate, c:net::Connection) {
			debug('client', 'ShellClientDelegate#on_connect()')
			c.pipeline.push(IO::handlers::Splitter("\n"))
			c.pipeline.push(jrc)
			c.pipeline.fire(IO::events::Active())
		}

		client = net::UnixStreamClient()
		client.connect(SOCK_FILE, scd)

		e = jrc.call('eval', [cmd])
		log("Eval result ${e.SafeStr()}")
		$(sleep 1)  # XXX: timing with eval(["p"]) # JsonRPC server or its callbacks are probably not thread safe

		last_seen_version = null
		while true {
			log("Polling last_seen_version=${last_seen_version}")
			p = jrc.call('poll', {
				'last_seen_version': last_seen_version
			})
			log("Poll result - timeline (ver. ${p.version})")
			last_seen_version = p.version

			# To think: maybe only display this group and not the whole timeline?
			gti = p.timeline.children.the_one({'$type': 'GroupTimelineItem', 'id': e.ti})
			rti = gti.children.the_one({'$type': 'ResultTimelineItem'}, found_none={null})
			if rti == null continue

			if dua {
				log("Will take default ui action ${dua}")
				m = rti =~ AtPath(Any, Capture("obj", {
					'$type': 'Object'
					'cur': {
						'path': dua
					}
				}))
				if m {
					obj = m["obj"]
					log("Found the Object $obj")
					dua_result = jrc.call('ui_default_action', [{'cur': obj.cur, 'ref': obj.ref}])
					log("Call to ui_default_action result: ${dua_result}")
				}
			}

			return p
		}
	}

	doc Starts shell server, JSON RPC proxy, and a browser client
	F server(launch_browser:Bool=true) {
		ENV.BROWSER = 'none'

		# XXX: Ugly hack to prevent direct output to stdout.
		global ($())
		F '$()'(cp:CommandsPipeline) {
			cp.options .= without('top_level')
			if cp.options.get('x_top_level') {
				cp.options.top_level = cp.options.x_top_level
			}
			guard false
		}


		section "Censoring for demo purposes" {
			_DESCENDABLE1 = AllOf(Eachable1, Not(Int), Not(Str))

			F _censor(x) x

			NGS_CENSOR = ENV.get('NGS_CENSOR')
			if NGS_CENSOR {
				words = NGS_CENSOR.split(',')
				F _censor(x:Str) {
					ret = x
					words.each_idx_val(F(i, v) {
						ret .= replace(v, "CENSORED${i+1}")
					})
					ret
				}
				F _censor(x:_DESCENDABLE1) x.map(_censor)
				F _censor(x:Eachable2) x.mapv(_censor)
			}
		}

		type ShellServerDelegate(net::ThreadedServerDelegate)
		global on_listen
		F on_listen(ssd:ShellServerDelegate, s:net::Server) {
			super(ssd, s)
			log("Listening on ${SOCK_FILE}")
			if launch_browser {
				p = $(x_top_level:: cd:PROXY_DIR npx ts-node src/server.ts ../ngs/ngs-shell.sock &)
				echo("Proxy PID: ${p.processes[0].pid}")

				web_server = $(cd:WEB_SERVER_DIR npm start &)
				echo("Web server PID: ${web_server.processes[0].pid}")
			}
		}

		tl = Timeline::Timeline()
		SHELL_METHODS = ns {
			F eval(line:Str) {

				section "Append line to the Timeline" {
					tc = Timeline::TextualCommandItem(Time(), line)
					g = Timeline::GroupItem().push(tc)
					tl.push(g)
				}
				fname = '<shell line file>'

				section "Shortcuts" {
					shortcuts = {
						'v': 'aws ec2 describe-vpcs'
						'p-': 'aws codepipeline list-pipelines'
						'p': '{ require("aws/CodePipeline.ngs")::pipelines::list() }'
						'p_censored': '{ require("aws/CodePipeline.ngs")::pipelines::list().map(F(p) p.filterk(Not(AnyOf(%[sources revisions])))) }'
						's-': 'aws cloudformation list-stacks'
						's': 'saws::stacks()'
					}
					line = shortcuts.get(line, line)
				}

				# TODO: join these sometimes
				Thread(SeqId("shell-eval-"), {
					debug('server', "Eval start: ${line}")
					bytecode = compile(line, fname)
					# TODO: pass warnings
					#bytecode.meta().warnings.each(F(w) {
					#	wl = w.location
					#	warn("${fname}:${wl.first_line}:${wl.first_column} warning: ${w.message}")
					#})
					func = load(bytecode, "<shell line func>")
					result = func()
					debug('server', "Eval end: ${line}")
					g.push(Timeline::ResultItem(Time(), result))
				})
				{'ti': g.id}  # Timeline Item ID
			}

			# event example: {cur={type=AWS::CodePipeline::Pipeline, id=XXXX}, ref={type=AWS::CodePipeline::Execution, id=XXXX}}
			F ui_default_action(event) {
				log("UI default action on ${event}")

				# TODO: move somewhere else
				# TODO: un-hardcode
				id = null
				if event =~ {'ref': {'type': 'AWS::CodePipeline::Execution', 'id': { id=A } }} {
					log("ui_default_action navigate to AWS::CodePipeline::Execution $id")

					i = tl[event.cur.ti]
					g = Timeline::GroupItem()
						tc = Timeline::TextualCommandItem(Time(), "Interaction: you have interacted with ${event.cur} << ${i} >> and navigated to ${event.ref}")
						g.push(tc)
						tc = Timeline::TextualCommandItem(Time(), "This is WIP. Nobody navigates to object with specific ID. You navigate to an object because of some semantic meaning.")
						g.push(tc)
					tl.push(g)

					### # TODO: join these sometimes
					### Thread(SeqId("shell-action-"), {
					### 	debug('server', "Action start")
					### 	g.push(Timeline::ResultItem(Time(), "TODO"))
					### })

					return {'ti': g.id}
				}
				# TODO: check why result of ui_default_action() is used in Bool() and causing exception
				# TODO: return error if this point is reached
				null
			}

			# TODO: handle broken pipe
			F poll(last_seen_version) {
				debug('client', "poll(last_seen_version=${last_seen_version}) - work in progress - returning the whole Timeline")
				section "Wait for later version before retuning the result" block b {
					not(last_seen_version) returns
					while true {
						if tl.version > last_seen_version {
							b.return()
						}
						$(sleep 0.1)
					}
				}
				result = {
					'timeline': ui::Element(tl)
					'version': tl.version
				}
				result.JsonData()._censor()
			}

			section "tests" {
				F test() "test method active"
				F test_add_one(n:Int) n + 1
				F test_div_by_zero() 1 / 0
			}
		}

		global on_connect
		F on_connect(ssd:ShellServerDelegate, c:net::Connection) {
			debug('server', 'ShellServerDelegate#on_connect()')
			c.pipeline.push(IO::handlers::Splitter("\n"))
			c.pipeline.push(IO::handlers::JsonRpcServer(SHELL_METHODS))
			super(ssd, c)
		}

		uss = net::UnixStreamServer()
		uss.listen(SOCK_FILE, ShellServerDelegate())

		net::unix_stream_server(SOCK_FILE, ShellServerDelegate())
	}
}