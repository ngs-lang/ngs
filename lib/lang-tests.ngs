# === Misc tests =================================

# expr1 op= expr2
TEST a = 1; a+=1 ; a*=10; a == 20
TEST a=[{"x": 7}, {"x": 8}]; a .= x; a == [7, 8]
TEST a=[1,2]; a .= map(F(x) x*2); a[0]+=10; a == [12,4]

TEST o = {'a': 1, 'b': [null, false, true, 3.14], 'nothing': null}; decode_json(encode_json(o)) == o
TEST decode_json("1xx") THROWS JsonDecodeFail
TEST h={'a': 1, 'b': 2, 'c': 3}; h.update({'b': 20, 'd': 40}); h == {'a': 1, 'b': 20, 'c': 3, 'd': 40}

TEST F opt(a, b=10, *rest) [b, rest]; opt(1) == [10, []]
TEST F opt(a, b=10, *rest) [b, rest]; opt(1, 2) == [2, []]
TEST F opt(a, b=10, *rest) [b, rest]; opt(1, 2, 3) == [2, [3]]
TEST F opt(a, b=10, *rest) [b, rest]; opt(1, b=10) == [10, []]
TEST F opt(a, b=10, *rest, **kw) [b, rest, kw]; opt(1, b=20) == [20, [], {"b": 20}]
TEST F opt(a, b=10, *rest, **kw) [b, rest, kw]; opt(1, c=20) == [10, [], {"c": 20}]
TEST F opt(a, b=10, *rest) [b, rest]; try opt(1, c=20) == [10, []] catch(e:MethodNotFound) true
TEST F opt(a, b=10, *rest, **kw) [b, rest, kw]; opt(1, b=30, **{"b": 20}) == [20, [], {"b": 20}]
TEST F opt(a, b=10, *rest, **kw) [b, rest, kw]; opt(1, b=30, **{"b": 20}, b=40) == [40, [], {"b": 40}]
TEST F opt(a, b=10, *rest, **kw) [a, b, rest, kw]; opt(1, 100, 200, **{"b": 20}, b=40) == [1, 100, [200], {"b": 40}]
TEST F f(a) a; f(**{"a": 10}) == 10
TEST F f(a=7) a; f(**{"a": 10}) == 10
TEST F f(a,b,*args,**kwargs) [a,b,args,kwargs]; f(kw1=100, 1, 2, 3, kw2=200) == [1, 2, [3], {"kw1":100, "kw2":200}]

TEST F construct(x:Int) F() x; f1=construct(1); f2=construct(2); (f1==f1) and (f1!=f2)
TEST 1.1 < 1.11
TEST 1.1 + 1.1 == 2.2
TEST F uniq_attrs_func() "some body"; uniq_attrs_func.Arr()[0].meta({"a": 1}); uniq_attrs_func.Arr()[0].meta() == {"a": 1}
TEST meta((+).Arr()[0])['name'] == '+'
# TODO: more introspection tests
TEST params((+).Arr()[0])[0]['name'] == 'a'
TEST params((+).Arr()[0])[0]['type'] === Real
TEST "config" in globals()
TEST args=['1', '+', '2']; $(expr $*args).Str()[0..1] == '3'
TEST time() > 1466662171
TEST a=[10,20,30]; f=a[X]; f(1) == 20
TEST a=[10,20,30]; f=X[1]; f(a) == 20
TEST %[${true}][0].typeof() == Bool
TEST %{a ${true}}.values()[0].typeof() == Bool

# === Arr tests ==================================
TEST [10,20,30,40][0..2] == [10,20]
TEST [10,20,30,40][1..2] == [20]
TEST (try [10,20,30,40][-1..2] catch(e:IndexNotFound) "OK") == "OK"
TEST [10,20,30,40][2..null] == [30, 40]
TEST (try [10,20,30,40][2..1] catch(e:InvalidArgument) "OK") == "OK"
TEST (try [10,20,30,40][2..10] catch(e:IndexNotFound) "OK") == "OK"
TEST [10,20,30,40][4..null] == []
TEST a=[1,2,3,4]; a[4..4]=["END"]; a[2..2]=["MIDDLE"]; a[0..0]=["START"]; a[0..1] = ["start"]; a == ["start", 1, 2, "MIDDLE", 3, 4, "END"]

# === Hash tests =================================
TEST h={"a": 1}; h.del("a"); h == {}
TEST h={}; try h.del("a") catch(e:KeyNotFound) true
TEST h={"a": 1, "b": 2}; h.del("a"); h == {"b": 2}

# === Str tests ==================================
TEST "abcd"[1..3] == "bc"
TEST s="abcd"; s[4..4]="END"; s[2..2]="MIDDLE"; s[0..0]="START"; s[0..1] = "s"; s == "sTARTabMIDDLEcdEND"

# === NormalTypeInstance tests ===================
TEST a = Path("a"); b = Path("a"); (a == b) and (a !== b)
TEST Path("a") != Path("b")

# === Exceptions tests ===========================
TEST h={}; try h["a"] catch(e:KeyNotFound) true
TEST a=[]; try a[0] catch(e:IndexNotFound) true
TEST a=[]; try a[0]=1 catch(e:IndexNotFound) true
TEST type T; try T().xyz catch(e:FieldNotFound) true
TEST try NO_SUCH_GLOBAL catch(e:GlobalNotFound) true
TEST try c_lseek(0, 0, "bad arg") catch(e:InvalidArgument) true
TEST try compile("xyz(", "something") catch(e:CompileFail) true
TEST try 1(2, 3) catch(e:DontKnowHowToCall) true
TEST type T; try echo(T(), T()) catch(e:MethodNotFound) true
TEST try F f() f(); try f() catch(e:StackDepthFail) true
TEST try [].pop() catch(e:EmptyArrayFail) true
TEST try [].shift() catch(e:EmptyArrayFail) true
TEST try { {myvar=myvar}() } catch(e:UndefinedLocalVar) { e.name == 'myvar'}

# === Partial application tests ==================
TEST [{"val": 10, "flag": false}, {"val": 20, "flag": true}].filter(X.flag).val == [20]
TEST %[f1 f3].map({"f1": 1, "f2": 2, "f3": 3}.(X)) == [1, 3]
TEST [[1, 10], [2,20]].map(X[0]) == [1, 2]
TEST [1,2].map([10,20,30][X]) == [20, 30]
TEST [[1],[2,3]].filter(X.has(1)) == [[1]]
TEST {true}()
TEST f = F(x, y) x+y; f(X, 10)(20) == 30

# === Namespaces tests ===========================
TEST ns1 = ns { a = 1; _b = 2; a = 100 }; ns1 == {"a": 100}
TEST ns1 = ns { F f(x) x+1; }; ns1::f(1) == 2
TEST ns1 = ns { yes_one = 1; no_one = 11; no_two = 12; _exports.=reject(F(k, v) k ~ /^no/) }; ns1 == {"yes_one": 1}
TEST ns1 = ns { return 10 }; ns1 == 10
TEST ns1 = ns { _exports = 11 }; ns1 == 11
TEST global a=110; ns1 = ns(outer_a=a) { a=outer_a+1 }; ns1::a == a+1
TEST ns { section "x" { a = 1; _c = 10 }; b = 2; _d = 20 } == %{a 1 b 2}

# === Process tests ================================

TEST try $(cat NO_SUCH_FILE 2>/dev/null) catch(pf:ProcessFail) true
TEST x=1; `line: echo a$x b${x}c` == "a1 b1c"

# === Redirections tests ===========================
# Warning: file name is not unique
TEST f='/tmp/ngs-redir-test'; $(echo -n abc >$f); $(echo -n def >>$f); txt=`cat $f`; $(rm $f); txt == 'abcdef'
TEST f='/tmp/ngs-redir-test'; $(ok: cat /NO-SUCH-FILE 2>$f); txt=`cat $f`; $(rm $f); txt ~ /No such file or directory/

# TODO
# TEST F f(a=100,b=200,c=300) [a,b,c]; f(b=10,20,30) # Currently b is not marked as matched and is overridden by 30

# === Guard tests ===
TEST F guard_yes_use_value() { guard 10 }; guard_yes_use_value() == 10
TEST F guard_yes_discard_value() { guard 10; 20 }; guard_yes_discard_value() == 20
TEST F guard_no() { guard 0 }; guard_no() THROWS MethodNotFound
