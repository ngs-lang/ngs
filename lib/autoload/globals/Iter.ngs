doc Iterator. Parent type for all specific iterator types.
type Iter

doc Represents attempt to fetch next value of an iterator when it's exhausted
doc %EX - { Iter([]).next() }
doc %EX - # ... Exception of type NoNext ...
type NoNext(Exception)

doc Arr (array) iterator.
doc %EX -
doc %EX - my_args = %[--switch val some other positional --sw2 val2]
doc %EX - i = Iter(my_args)
doc %EX -
doc %EX - named = {}
doc %EX - positional = []
doc %EX -
doc %EX - while i {
doc %EX - 	t = i.next()
doc %EX - 	m = t ~ Pfx('--')
doc %EX - 	if m {
doc %EX - 		named[m.after] = i.next()
doc %EX - 	} else {
doc %EX - 		positional.push(t)
doc %EX - 	}
doc %EX - }
doc %EX -
doc %EX - echo(named)
doc %EX - echo(positional)
doc %EX - # Output:
doc %EX - #   {switch=val, sw2=val2}
doc %EX - #   [some,other,positional]
type ArrIter([Iter, Eachable1])

doc EXPERIMENTAL Hash iterator.
type HashIter(Iter)

doc Iterator that returns given value forever.
doc %EX - i = ConstIter(10)
doc %EX - echo(i.next())
doc %EX - echo(i.next())
doc %EX - # Output:
doc %EX - #   10
doc %EX - #   10
type ConstIter([Iter, Eachable1])

doc Iterates over a Range
doc %EX - i = RangeIter(10..20)
doc %EX - echo(i.next())
doc %EX - echo(i.next())
doc %EX - # Output:
doc %EX - #   10
doc %EX - #   11
type RangeIter([Iter, Eachable1])

doc EXPERIMENTAL! Do not use!
type MapIter([Iter, Eachable1])

doc EXPERIMENTAL! Do not use!
type FilterIter([Iter, Eachable1])

doc EXPERIMENTAL! Do not use!
type FunIter([Iter, Eachable1])

doc Private method of Iter.ngs, will be hidden in future.
F throw_if_no_next(i:Iter) {
	not(i) throws NoNext("No next element in iterator").set('iter', i)
}

doc Fetch and drop next n values from iterator i.
doc %EX - i = Iter([10,20,30])
doc %EX - drop(i, 1)
doc %EX - echo(i.next())
doc %EX - # Output: 20
F drop(i:Iter, n:Int) { n.times({ i.next()}); i }

doc Fetch and convert to array next n values from iterator i.
doc %EX - i = Iter([10,20,30])
doc %EX - echo(i.take(2))  # Output: [10,20]
F take(i:Iter, n:Int) n.map({ i.next() })

doc Supports "for i in existing_iterator". Useful if you want to have a reference to the Iter for any reason.
doc %RET - i
doc %EX - # Prints 0, 2, ...
doc %EX - for i in my_iter=Iter(10) {
doc %EX -   echo(i)
doc %EX -   my_iter.drop(1)
doc %EX - }
doc %AUTO - for my_var in something { ... }
F Iter(i:Iter) i

doc Calls cb with each element from i
doc %RET - i
doc %EX - Iter(10).each(echo)  # Prints 0 to 9
F each(i:Iter, cb:Fun) {
	for elt in i {
		cb(elt)
	}
	i
}

TEST s=0; NumRange(1,10,true,true).Iter().each({ s+= A }); s==55

# ---------- MapIter ----------
# WIP

doc EXPERIMENTAL! Do not use!
F init(i:MapIter, upstream_iter:Iter, mapper:Fun) {
	i.val = upstream_iter
	i.mapper = mapper
}

doc EXPERIMENTAL! Do not use!
F next(i:MapIter) i::mapper(i.val.next())

doc EXPERIMENTAL! Do not use!
F Bool(i:MapIter) Bool(i.val)

doc EXPERIMENTAL! Do not use!
F map(i:Iter, mapper:Fun) MapIter(i, mapper)

# ---------- FilterIter ----------
# WIP

doc EXPERIMENTAL! Do not use!
F init(i:FilterIter, upstream_iter:Iter, pattern) {
	i.val = upstream_iter
	i.pattern = pattern
	# elt & elt_loaded could be Box but using faster approach
	i.elt = null
	i.elt_loaded = false
	i.finished = false
}

ns {
	global next, peek, Bool

	F _load(i:FilterIter) {
		while i.val {
			i.elt = i.val.next()
			if i.elt =~ i.pattern {
				i.elt_loaded = true
				return
			}
		}
		i.finished = true
	}

	doc EXPERIMENTAL! Do not use!
	F next(i:FilterIter) {
		i.throw_if_no_next()
		assert(i.elt_loaded)
		i.elt_loaded = false
		return i.elt
	}

	doc EXPERIMENTAL! Do not use!
	F peek(i:FilterIter) {
		i.throw_if_no_next()
		assert(i.elt_loaded)
		return i.elt
	}

	doc EXPERIMENTAL! Do not use!
	F Bool(i:FilterIter) {
		i.finished returns false
		i.elt_loaded returns true
		i._load()
		not(i.finished)
	}
}

doc EXPERIMENTAL! Do not use!
F filter(i:Iter, pattern) FilterIter(i, pattern)
doc EXPERIMENTAL! Do not use!
F reject(i:Iter, pattern) FilterIter(i, Not(pattern))

TEST Iter(1...10).map(X*2).reject(X>7).map(X*2).Arr() == [4, 8, 12]
TEST Iter(1...10).map(X*2).filter(X>15).map(X*2).Arr() == [32, 36, 40]

# ---------- FunIter ----------

F Iter(f:Fun) FunIter(f)

F init(i:FunIter, f:Fun) {
	i.val = f
	i.elt_loaded = false
}

ns {
	global next, peek, Bool

	F _load(i:FunIter) {
		i.elt_loaded returns
		i.elt = i::val()
		i.elt_loaded = true
	}

	doc EXPERIMENTAL! Do not use!
	F next(i:FunIter) {
		i._load()
		i.elt_loaded = false
		return i.elt
	}

	doc EXPERIMENTAL! Do not use!
	F peek(i:FunIter) {
		i._load()
		return i.elt
	}

	doc EXPERIMENTAL! Do not use!
	F Bool(i:FunIter) true
}
# ---------- ConstIter ----------
doc Constant iterator constructor.
doc val - the constant value to use in next() and peek()
F init(i:ConstIter, val) init(args())

doc Return the constant iterator value.
F next(i:ConstIter) i.val

doc Return the constant iterator value.
F peek(i:ConstIter) i.val

doc Convert ConstIter to Bool (true).
doc %RET - true
F Bool(i:ConstIter) true

TEST ConstIter(7).drop(10).take(2) == [7,7]

# ---------- RangeIter ----------
doc Create Iter from NumRange
F Iter(r:NumRange) RangeIter(r)

doc Create Iter from Int
F Iter(n:Int) Iter(0..n)

doc Initialize RangeIter. Will throw NotImplemented if r.start or r.step are not Int
F init(i:RangeIter, r:NumRange) {
	r.start is not Int throws NotImplemented("start must be Int for now").set('value', r)
	r.step is not Int throws NotImplemented("step must be Int for now").set('value', r)
	i.val = r
	i.elt = r.start + if r.include_start then 0 else r.step
}

doc Return next item in range.
F next(i:RangeIter) {
	throw_if_no_next(i)
	ret = i.elt
	i.elt += i.val.step
	ret
}

doc Check whether there is at least one uniterated item in range.
doc %RET - Bool. true: next() will return next element. false: next() will throw NoNext
F Bool(i:RangeIter) {
	r = i.val
	# Copy+paste from each(r:NumRange, cb:Fun) from stdlib
	# TODO: deduplicate the code
	econd {
		(r.end is NoData) or (r.step == 0) {
			cmp = F(a,b) true
		}
		r.step > 0 {
			cmp = if r.include_end (<=) (<)
		}
		r.step < 0 {
			cmp = if r.include_end (>=) (>)
		}
	}
	cmp(i.elt, r.end)
}

TEST NumRange(1, 4, false, false).Iter().Arr() == [2,3]
TEST NumRange(1, 4, false, true).Iter().Arr() == [2,3,4]
TEST NumRange(1, 4, true, false).Iter().Arr() == [1,2,3]
TEST NumRange(1, 4, true, true).Iter().Arr() == [1,2,3,4]

# ---------- ArrIter ----------
doc Calls ArrIter constructor.
doc %EX - i = Iter([10, 20, 30])
doc %RET - ArrIter
F Iter(arr:Arr) ArrIter(arr)

doc ArrIter constructor.
doc %EX - i = ArrIter([10, 20, 30])
F init(i:ArrIter, arr:Arr) {
	i.val = arr
	i.idx = 0
}

doc Textual representation of ArrIter.
doc %RET - Str
F Str(i:ArrIter) "<ArrIter ${i.idx}/${i.val.len()}>"

doc Check whether there are more array elements to iterate over.
doc %RET - Bool. true: next() will return next element. false: next() will throw NoNext
F Bool(i:ArrIter) i.idx < i.val.len()

doc Get value of the next element of the array iterated over.
doc %RET - Any
F next(i:ArrIter) {
	throw_if_no_next(i)
	ret = i.val[i.idx]
	i.idx += 1
	ret
}

doc Preview value of the next element of the array iterated over.
doc Does not affect internal pointer which means it does not affect of value returned by next().
doc %RET - Any
F peek(i:ArrIter) {
	throw_if_no_next(i)
	i.val[i.idx]
}

TEST i = Iter([1,2]); [i.next(), i.peek()] == [1,2]
TEST { [].Iter().next() }.assert(NoNext)

# EXPERIMENTAL
# Not sure it's needed but it's good to have it for completeness
# ---------- HashIter ----------
F Iter(h:Hash) HashIter(h)

doc HashIter constructor.
doc %EX - i = HashIter({"a": 1, "b": 2})
F init(i:HashIter, h:Hash) {
	i.val = h
	i.entry = ll_hash_head(h)
	i.idx = 0
}

doc Textual representation of HashIter.
doc %RET - Str
F Str(i:HashIter) "<HashIter ${i.idx}/${i.val.len()}>"

doc Check whether there are more pairs to iterate over.
doc %RET - Bool. true: next() will return next pair. false: next() will throw NoNext
F Bool(i:HashIter) i.entry != null

doc Get next key-value of the hash iterated over.
doc %RET - Any
F next(i:HashIter) { ret = i.peek(); i.entry = i.entry.ll_hash_entry_next(); ret  }

doc Preview key-value of the next pair of the hash iterated over.
doc Does not affect internal pointer which means it does not affect of value returned by next().
doc %RET - Any
F peek(i:HashIter) { throw_if_no_next(i); [i.entry.ll_hash_entry_key(), i.entry.ll_hash_entry_val()] }

TEST i = Iter({"a": 1, "b": 2}); [i.next(), i.peek()] == [["a", 1], ["b", 2]]
TEST { {}.Iter().next() }.assert(NoNext)

# F Counter(start:Int=0) Iter(start..null)

doc Convert Iter into JSON compatible data structure - array.
doc Forces evaluation of MapIter for example.
F JsonData(i:Iter) collector i.each(collect + JsonData)

type SkipError(Error)

doc Returns the given Iter but skipping leading elements while the pattern matches. 
doc If all the elements matches the pattern the Iter will be empty.
doc %EX - [0, 2, 3, 25, 19, 7].Iter().skip(F(x) x != 3).Arr() returns [3, 25, 19, 7]
doc %RET - Iter
F skip(i:Iter, pattern=Bool.constructors){
	while i {
		i.peek() !~ pattern breaks
		i.next()
	}
	i
}

TEST [1, 2, 3, 4, 5, 34, 5].Iter().skip(X != 3).Arr() == [3, 4, 5, 34, 5]
TEST [1, 2, 3, 5, 34, 5].Iter().skip(X != 4).Arr() == []

doc Returns the given Iter after consuming first count elements.
doc %EX - [3, 4, 5, 34, 5].Iter().skip(3).Arr() == [34, 5] 
doc %RET - Iter
F skip(i:Iter, count:Int){
	try {
		for(_; count) i.next()
	} catch(nn: NoNext) {
		throw SkipError("Invalid value: Greater than the length of the Iter", nn)
	} 
	i
}

TEST [3, 4, 5, 34, 5].Iter().skip(3).Arr() == [34, 5] 
TEST [3, 40, 15, 34, 5].Iter().skip(2).Arr() == [15, 34, 5] 
TEST {[3, 40, 15, 34, 5].Iter().skip(10)}.assert(SkipError)

doc Type that allows us to iterate over a directory.
type DirIter(Iter)

# ---------- DirIter ----------
doc Calls DirIter constructor.
doc %RET - DirIter which allows us to iterate over a directory
F Iter(d:Dir) DirIter(d)

doc Initialize the DirIter with specific Dir
F init(i:DirIter, d:Dir) i.dir = c_opendir(d.path)

doc Check whether there are more paths to iterate over.
doc %RET - Bool. true: next() will return next element. false: next() will throw NoNext
F Bool(i:DirIter) {

}

doc Get next path of a directory iterated over.
doc %RET - Path
F next(d:DirIter) {
	SKIP_DIRS = ['.', '..']
	#throw_if_no_next(d)
	ret = c_readdir(d.dir)
	ret.d_name in SKIP_DIRS continues
	ret
}

doc Calls cb with each path from the directory
doc %RET - i
F each(d:Dir, cb:Fun) DirIter(d).Iter().each(cb)
