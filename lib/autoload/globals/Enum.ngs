doc Mapping of names to numbers
type Enum(HashLike)

doc Enum constructor.
F init(e:Enum) {
	super(e)
	e.meta().numbers_to_names = {}
}

doc Add new name to mapping. Names are mapped to consecutive zero-based integers.
doc %EX - e = Enum()
doc %EX - e.push("x")
doc %EX - e["x"]  # 0
doc %EX - e.push("y")
doc %EX - e["y"]  # 1
doc %RET - e
F push(e:Enum, name:Str) {
	name in e returns
	idx = e.len()
	e[name] = idx
	e.meta().numbers_to_names[idx] = name
	e
}

doc Make new Enum with maximum of l (first) names from given Enum e.
doc e - Source enum
doc %RET - Enum
doc %EX - e = Enum()
doc %EX - e.push("x")
doc %EX - e.push("y")
doc %EX - e = e.limit(1)
doc %EX - e is Enum and e.len() == 1  # true
F limit(e:Enum, l:Int) {
	ret = Enum()
	ret.meta().HashLike = e.meta().HashLike.limit(l)
	ret.meta().numbers_to_names = e.meta().numbers_to_names.limit(l)
	ret
}

doc Get name of number
F '[]'(e:Enum, number:Int) e.meta().numbers_to_names[number]

doc String representation of Enum
F Str(e:Enum) "<Enum ${e.meta().HashLike}>"

TEST e=Enum(); e.push("x"); e.push("x"); e.len() == 1 and "x" in e
TEST e=Enum(); e.push("x"); e.push("y"); e = e.limit(1); e is Enum and e.len() == 1
