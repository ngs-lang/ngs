ns {

	global ArgvMatcher, init, (~), ParamsMatchY, ParamsMatchN, SwitchParseFail

	type _MatchedParam(FullBox)
	type _UnmatchedParam(EmptyBox)

	type ParamsMatchY(MatchSuccess)
	type ParamsMatchN(MatchFailure)

	F init(pmy:ParamsMatchY, args:Arr, kwargs:Hash) {
		pmy.args = args
		pmy.kwargs = kwargs
	}

	type SwitchParseFail(InvalidArgument)


	# Decorator. TODO: Consider generic fields-setting decorator
	doc Sets ARGV matching option.
	doc option - Option name. The only supported option at this time is "positionals".
	doc value - Option value.
	doc %EX - # Any command line argument that is not "allreg" goes to "filters" parameters.
	doc %EX - ArgvMatcher('positionals', 'filters') do
	doc %EX - F main(filters:Arr, allreg:Bool=false) ...
	F ArgvMatcher(option:Str, value, f:UserDefinedMethod) {
		f.meta().dflt('ArgvMatcher', {}).set(option, value)
		f
	}


	# --- "~" matcher ---

	# TODO: *args, **kwargs
	# TODO: replace '-' in argv parameters names with '_' when matching
	doc Please do not use directly!
	doc Tries to match command line arguments with closure parameters.
	doc argv - Command line arguments, typically ARGV
	doc udm - UserDefinedMethod to match with
	doc %RET - Match (ParamsMatchY on success, ParamsMatchN on failure). If ParamsMatchY is returned it has "matches" field with values in suitable order to call c. If ParamsMatchN is returned, it has "message" field explaining why there was no match. Currently it's not printed anywhere.
	doc %EX - ArgvMatcher; (["--b", "B", "A", "C"] ~ F(a,b,c) 7).matches  # %[A B C]
	doc %EX - (["A", "C", "D", "--b", "B"] ~ ArgvMatcher("positionals", "a") do F(a,b) 7).matches  # %[%[A C D] B]
	F ~(argv:Arr, udm:UserDefinedMethod) block b {

		debug("ARGV_MATCHER", "Trying to match argv=${argv} udm=${udm}")

		LONG_SW_PFX = Pfx('--')
		SHORT_SW_PFX = Pfx('-')
		NEG_PFX = Pfx('no-')

		mp = MethodParams(udm)

		debug("ARGV_MATCHER", "mp=${mp}")

		args = _UnmatchedParam * mp.count(RequiredMethodParam)
		kwargs = {}

		F set_match(v) {
			ematch mp[param_name] {
				RequiredMethodParam args[mp[param_name].idx] = _MatchedParam(v)
				OptionalMethodParam kwargs[param_name] = v
			}
		}

		F next_arg() {
			try
				arg = argv_iter.next()
			catch(nn:NoNext)
				throw ParamsMatchN().set('message', "Parameter '${param_name}' was not followed by parameter value")
			arg
		}

		accepting_named_arguments = true
		positionals = []
		for arg in argv_iter = Iter(argv) {
			param_name = null
			# arg = argv_iter.next()
			# TODO: process -xyz arg as -x -y -z ?
			if accepting_named_arguments {
				cond {
					arg == '--' { accepting_named_arguments = false; continue }
					(m = arg ~ LONG_SW_PFX) { param_name = m.after }
					(arg != '-' and m = arg ~ SHORT_SW_PFX) {
						arg.len() != 2 throws SwitchParseFail("Don't know how to parse command line switch ${arg}").set('value', arg)
						param_name = m.after
					}
				}
			}
			if param_name {
				# named parameter
				if (negated = param_name ~ NEG_PFX) {
					param_name = negated.after
				}

				if param_name not in mp {
					if mp.hash_splat() {
						if negated {
							return ParamsMatchN().set('message', "Parameter '${param_name}' is not a boolean (has unknown type due to kwargs) but used with 'no-'")
						}
						kwargs[param_name] = next_arg()
						continue
					} else {
						return ParamsMatchN().set('message', "Unknown parameter '${param_name}'")
					}
				}

				if mp[param_name].type == Bool {
					set_match(not(negated))
				} else {
					if negated {
						return ParamsMatchN().set('message', "Parameter '${param_name}' is not a boolean but used with 'no-'")
					}
					arg = next_arg()
					set_match(arg.decode(mp[param_name].type))
				}
			} else {
				# positional parameter
				positionals.push(arg)
			}
		}

		if (param_name = try udm.meta().ArgvMatcher.positionals) {
			debug("ARGV_MATCHER", "Positionals go to specified parameter positionals=${positionals} parameter=${param_name}")
			set_match(positionals)
			positionals = []
		}

		positionals.each(F(arg) {
			idx = args.index(_UnmatchedParam, dflt=null)
			if idx is Null {
				if mp.len() > args.len() {
					# Optional parameter
					args.push(_UnmatchedParam())
					idx = args.len() - 1
				}
			}
			if idx is Null {
				if mp.arr_splat() {
					args.push(_MatchedParam(arg))
					return null
				} else {
					b.return(ParamsMatchN().set('message', "Too many arguments"))
				}
			}
			debug("ARGV_MATCHER", "Setting matched args idx=$idx arg=$arg type-to-convert-to=${mp[idx].type}")
			try {
				v = arg.decode(mp[idx].type)
			} catch(e) {
				b.return(ParamsMatchN().set('message', "Failed to convert to desired type for parameter ${mp[idx].name}"))

			}
			args[idx] = _MatchedParam(v)
		})

		for(i;args.len()) {
			args[i] continues
			p = mp[i]
			return ParamsMatchN().set('message', "Parameter '${p.name}' missing")
		}

		debug("ARGV_MATCHER", "Matched argv=${argv} udm=${udm}")
		ParamsMatchY(args.map(get), kwargs)
	}

	TEST ArgvMatcher; (["--b", "B", "A", "C"] ~ F(a,b,c) 7).args == %[A B C]
	TEST ArgvMatcher; (["--b", "B", "A", "C", "D"] ~ F(a,b,c) 7) is ParamsMatchN
	TEST ArgvMatcher; (["--b", "B", "A", "C", "D"] ~ F(a,b,c, *d) 7).args == %[A B C D]
	TEST ArgvMatcher; (["A", "C", "D", "--b", "B"] ~ F(a,b,c, *d) 7).args == %[A B C D]
	TEST ArgvMatcher; m = (["--b", "B", "A", "C", "--d", "10"] ~ F(a,b,c,*args,**kw) 7); m.args == %[A B C] and m.kwargs == {"d": "10"}
	TEST ArgvMatcher; (["A"] ~ F(a,b:Int=null) 7).args == %[A]
	TEST ArgvMatcher; (["A", "10"] ~ F(a,b:Int=null) 7).args == %[A 10]
	TEST (["A", "C", "D", "--b", "B"] ~ ArgvMatcher("positionals", "a") do F(a,b) 7).args == %[%[A C D] B]
	TEST ((["A", "C", "D", "--b", "B"] ~ ArgvMatcher("positionals", "a") do F(a,b=null) 7) =~ {"args": [%[A C D]], "kwargs": %{b B}})
	TEST ArgvMatcher; (["1", "1.0"] ~ F(i:Int, r:Real) 7).args == %[1 1.0]
}
