# === Table ======================================

ns {
	global init, push, each, len, echo, digest, Str

	# --- TableView ---
	type TableView

		F init(tv:TableView, name:Any=null, view_name:Str=null, columns:Arr=null) {
			guard (name is Str) or (name is Null)
			tv.name = name
			tv.view_name = view_name or name
			tv.columns = (columns or []).map(TableViewColumn)
		}

	doc weight - Width distribution weight when there is not enough space on the screen
	type TableViewColumn

		F TableViewColumn(tvc:TableViewColumn) tvc
		F TableViewColumn(s:Str) SimpleTableViewColumn(s)

		F init(tvc:TableViewColumn) {
			"TODO"
		}

		type SimpleTableViewColumn(TableViewColumn)
			F init(stvc:SimpleTableViewColumn, name:Str) {
				super(stvc)
				stvc.name = name
			}

	# --- _Cell ---

	doc Table cell. Array of rows.
	type _Cell(ArrLike)

		doc Any unknown value is a table cell with one row, Str(val)
		F init(c:_Cell, val) {
			super(c)
			c.val = val
			c.push(Str(val))
		}

		doc A null value is a table cell with one row, "-"
		F init(c:_Cell, val:Null) {
			super(c)
			c.val = val
			c.push("-")
		}

		doc An Eachable1 value is a table cell with all elements one below the other.
		doc Converts elements to strings using _Cell().
		F init(c:_Cell, val:Eachable1) {
			guard val is not Str
			guard val is not Int
			super(c)
			c.val = val
			# TODO: If array elements are more than one line, put a separator
			val.each(F(v) {
				t = _Cell(v)
				t.each(c.push(X))
			})
			# cells = val.map(_Cell)
			# do_separators = cells.max(len) > 1

			# aws ec2 describe-route-tables
			# WIP # cells = val.each(_Cell)
			# WIP # do_sep = any(cells, {A.height() > 1})
		}

		doc An Eachable2 value is a table cell with all pairs one below the other.
		doc Converts values to strings using _Cell().
		F init(c:_Cell, val:Eachable2) {
			guard val is not Str
			super(c)
			c.val = val
			val.each(F(k, v) {
				assert(k is Str)
				c.push("${k}:")
				t = _Cell(v)
				t.each({ c.push("  ${A}") })
			})
		}

		doc Make a cell of given width. Uses _Cell(val).
		F init(c:_Cell, val, width:Int) {
			debug("table", "init() _Cell val=$val width=$width")
			init(c, val)
			# Can't use map() because need to change in-place
			for i in len(c) {
				c[i] .= Str(width)
			}
		}

		doc Get cell with, defaults to zero.
		F width(c:_Cell) (c or [""]).map(len).max()

		doc Get cell height.
		F height(c:_Cell) len(c)


	# --- (table utils) ---

	# TODO: smarter algorithm
	F columns_names_best_order(cols:Arr) {
		a = [/^id$/i, /id$/i, /^stat/i, /^name$/i, /description$/i, /name$/i]

		F weight(col) {
			idx = 0
			for x in a {
				idx += 1
				if col ~ x {
					return [1000, idx, col]
				}
			}
			[2000, 0, col]
		}

		# cols.sort(weight) ?
		weighted = cols.map(F(col) {
			{
				'name': col
				'weight': weight(col)
			}
		})

		weighted.sort('weight').name
	}

	# --- Table ---

	doc Holds tabular data
	doc name - Table name to display and for configuration lookup
	doc cols_enum - Enum for columns names
	type Table(Eachable1)

		doc Initialize rows to an empty array
		F init(t:Table, name=null) {
			guard name is Str or name is Null
			t.name = name
			t.cols_enum = Enum()
			t.rows = []

			conf = config(if t.name "table_${t.name}" "table") or []
			debug("Table", "Table config is $conf")
			conf % register_column(t, X)
		}

		doc Create named table containing provided rows
		doc name - name of the table for display and for configuration purposes
		doc rows_hashes - rows, each row is a Hash
		F init(t:Table, name, rows_hashes:Arr) {
			guard name is Str or name is Null
			guard rows_hashes.all(Hash)
			super(t, name)

			if not(t.cols_enum) {
				# rows_hashes.map(keys).flatten().each(register_column(t, X))
				cols_names = rows_hashes.map(keys).flatten().uniq()
				columns_names_best_order(cols_names).each(register_column(t, X))
			}
			debug("Table", "Table created with fields: ${t.cols_enum}")
			rows_hashes.each(push(t, X))
		}

		doc Create unnamed table containing provided rows
		F init(t:Table, rows_hashes:Arr) super(t, null, rows_hashes)

		doc Create single-line table
		F init(t:Table, row_hash:Hash) super(t, null, [row_hash])

		TEST Table2::columns(Table2::Table({"a": 1, "b": 2})) == [[1], [2]]

		doc Internal method. Please do not use.
		F register_column(t:Table, k) t.cols_enum.push(k)

		doc Internal method. Please do not use.
		F register_columns(t:Table, columns:Eachable1) {
			columns.each(register_column(t, X))
		}

		doc Append given row to the table
		doc %RET - t
		F push(t:Table, row_arr:Arr) {
			# TODO: handle mismatch in number of columns
			t.rows.push(row_arr)
			t
		}

		doc Append give row to the table
		doc %RET - t
		F push(t:Table, row_hash:Hash) {
			# TODO: handle mismatch of columns
			row = t.cols_enum / get(row_hash, X, null)
			t.push(row)
			t
		}

		doc Internal method. Please do not use.
		F width(t:Table) t.cols_enum.len()

		doc Get values in the given table column.
		doc %RET - Arr
		F column(t:Table, k:Str) t.column(t.cols_enum[k])

		doc Get values in the given table column.
		doc %RET - Arr
		F column(t:Table, n:Int) t.rows.map(X[n])

		doc Get values in all table columns.
		doc %RET - Arr of Arr
		F columns(t:Table) t.width().map(t.column(X))

		doc Please do not use. This method might change.
		doc Call cb with each table row.
		F each(t:Table, cb:Fun) t.rows.each(cb)

		# --- Conversions ---

		doc Get number of rows in the table.
		F len(t:Table) t.rows.len()

		doc Check whether there are any rows in the table.
		F Bool(t:Table) t.len().Bool()

		F _calculate_num_cols_to_show(t:Table, max_columns_widths:Arr, available_cols:Int, sep_len:Int) {
			cols_to_show = 0
			for(i; max_columns_widths.len()) {
				cols_to_show + max_columns_widths[i] > available_cols returns i
				cols_to_show += max_columns_widths[i] + sep_len
			}
			i
		}

		# TODO: echo(t:Table) for non-tty. Alternatives JSON or greppable.

		# WIP: TableView
		doc Displays a table. Implemented only for tty output (or output_format=text configuration)
		F echo(t:Table, tv:TableView=null) {
			guard 1.isatty() or (config('output_format') == 'text')

			COLS_SEP = '  ' # Two spaces

			F maybe_output_headers() {
				if(do_output_headers) {
					cols_enum.map_idx_key_val(F(width_idx, k, row_idx) {
						_Cell(k, max_columns_widths[width_idx])[0]
					}).join(COLS_SEP).echo()
					do_line_spacing()
				}
			}

			lines = (ENV.get('LINES')   or `line: tput lines`).Int()
			cols  = (ENV.get('COLUMNS') or `line: tput cols`).Int()
			# TODO: special treatment for tmux? can print any width and tmux can be adjusted later.
			# TODO: support Arr in headers

			# TODO: syntax: tv := TableView(name = t.name, columns = t.cols_enum.keys())
			if tv is Null {
				tv = TableView(name = t.name, columns = t.cols_enum.keys())
			}

			columns_to_show = tv.columns.name
			cols_enum = Enum()
			columns_to_show.each(F(c) cols_enum[c] = t.cols_enum[c])

			do_output_headers = config('output_headers') in [null, true]
			max_columns_widths = cols_enum.map(F(k, idx) {
				col = t.column(idx)
				((if do_output_headers [k] []) + col).map(_Cell).map(width).max()
			})
			debug("table", "max_columns_widths $max_columns_widths")

			# How much full table columns fit on the screen
			showing_n_columns = t._calculate_num_cols_to_show(max_columns_widths, cols, len(COLS_SEP))
			cols_enum .= limit(showing_n_columns)

			# Setup line spacing
			do_line_spacing = t.any(F(row) {
				row.any(F(cell) {
					_Cell(cell).height() > 1
				})
			})

			do_line_spacing = if do_line_spacing F() echo('') else nop

			# Title
			if t.name and (config('output_title') in [null, true]) {
				echo("=== ${t.name} ===")
				do_line_spacing()
			}

			# Headers
			# WARNING: Headers assumed to be Str
			maybe_output_headers()

			# Rows
			t.rows.each(F(row) {
				row_cells = cols_enum.map_idx_key_val(F(width_idx, k, row_idx) {
					_Cell(row[row_idx], max_columns_widths[width_idx])
				})
				screen_lines_for_row = row_cells.map(height).max()
				for(screen_line; screen_lines_for_row) {
					screen_line_items = row_cells.map_idx_val(F(idx, cell) {
						cell.get(screen_line, Str('', max_columns_widths[idx]))
					})
					echo(screen_line_items.join(COLS_SEP))
				}
				do_line_spacing()
			})

			maybe_output_headers()
		}

		doc Output (echo) CSV table with cells that contain arrays converted to columns.
		doc TODO: data escaping.
		F echo(t:Table) {
			guard config('output_format') == 'csv-flat'
			col_elts = t.cols_enum.values().Hash(F(col_name) {
				max(t.column(col_name).map(ensure_array).map(len) + [0])
			})
			field_names = t.cols_enum.map(F(col_name, col_idx) {
				x = col_elts[col_idx]
				x == 1 returns [col_name]
				(1...x).map("${col_name}_${X}")
			}).flatten()

			# Headers
			echo(field_names.join(','))

			t.rows.each(F(row) {
				cols_to_display = row.map_idx_val(F(col_idx, cell) {
					val = ematch cell {
						Arr  cell
						Null ['']
						Any  [cell]
					}
					n = col_elts[col_idx]
					val
				}).flatten()
				echo(cols_to_display.join(','))
			})
		}

		TEST Table2::column(Table2::Table([{"a": 1}, {"a": 2}]), "a") == [1,2]
		TEST Table2::columns(Table2::Table([{"a": 1}, {"a": 2}])) == [[1,2]]
		TEST Table2::Table([{"a": 1}, {"a": 2}]).len() == 2

		F digest(t:Table) {
			ret = Table("Digest of ${t.len()} rows")
			%[field uniq min max].each(F(col) ret.register_column(col))
			cols = t.columns()
			# Work around uniq() limitation (uses Hash internally) by using .map(Str)
			t.cols_enum.keys().sort().each(F(field_name) {
				field_idx = t.cols_enum[field_name]
				ret.push({
					'field': field_name
					'uniq': cols[field_idx].map(Str).uniq().len()
					'min': cols[field_idx].min() tor '(failed to compare)'
					'max': cols[field_idx].max() tor '(failed to compare)'
				})
			})
			ret
		}

		F Str(t:Table) {
			"<${t.Type().name} columns=${t.cols_enum.keys().join(',')} rows:${t.len()}>"
		}

}
