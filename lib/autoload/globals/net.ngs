ns {

	# Work in progress!
	# Flimsy code, needs refactor!

	section "Wrappers around C functions" {
		F _assert(code:Int, func:Str) {
			e = c_errno()
			if code == -1 {
				e throws CError(e, '')::{
					A::message = "${A.errno_name} in ${func}()"
				}
				throw InvalidArgument("C code returned -1 but errno is not set")
			}
			code
		}

		# TODO: consider retry()
		F _while_eintr(body:Fun) {
			while true {
				try {
					return body()
				} catch(intr:CError) {
					guard intr.errno = C_EINTR
				}
			}
		}

		global socket
		F socket(domain:Int, type:Int, protocol:Int=0) c_socket(domain, type, protocol)._assert('socket').assert(X>0)

		TEST socket(C_PF_UNIX, C_SOCK_DGRAM) >= 0

		global bind
		F bind(socket:Int, address:c_sockaddr) c_bind(socket, address)._assert('bind').assert(0)

		TEST $(ok:[0, 1] rm sock_test); bind(socket(C_PF_UNIX, C_SOCK_DGRAM), c_sockaddr_un("sock_test")) == 0

		global connect
		F connect(socket:Int, address:c_sockaddr) c_connect(socket, address)._assert('connect').assert(0)

		TEST $(ok:[0, 1] rm sock_test); sock = socket(C_PF_UNIX, C_SOCK_STREAM); bind(sock, c_sockaddr_un("sock_test")); listen(sock, 1); connect(socket(C_PF_UNIX, C_SOCK_STREAM), c_sockaddr_un("sock_test")) == 0

		global recvfrom
		F recvfrom(sock:Int, length:Int, flags:Int, address:c_sockaddr) {
			ret = _while_eintr({
				c_recvfrom(sock, length, flags, address)
			})
			ret[0]._assert('recvfrom')
			ret[1]
		}

		global listen
		F listen(sock:Int, backlog:Int) c_listen(sock, backlog)._assert('listen')

		global accept
		F accept(sock:Int, address:c_sockaddr) _while_eintr({
			c_accept(sock, address)._assert('accept')
		})

		global send
		F send(socket: Int, buffer:Str, flags:Int=0) _while_eintr({
			c_send(socket, buffer, flags)._assert('send')
		})
	}

	section "Higher level networking" {

		type Client
		type UnixStreamClient(Client)

		type Server
		type UnixStreamServer(Server)

		type Connection
			type ClientConnection(Connection)
			type ServerConnection(Connection)

		global init

		type ConnectionPipelineDelegate(COR::PipelineDelegate)
		F init(cpd:ConnectionPipelineDelegate, connection:Connection) init(args())

		global handle
		F handle(cpd:ConnectionPipelineDelegate, e:IO::events::Write) {
			debug('server', "ConnectionPipelineDelegate Write")
			cpd.connection.send(e.data)
		}
		F handle(cpd:ConnectionPipelineDelegate, e:IO::events::Active) {
			debug('server', 'ConnectionPipelineDelegate Active')
		}
		F handle(cpd:ConnectionPipelineDelegate, e:IO::events::Inactive) {
			debug('server', 'ConnectionPipelineDelegate Inactive')
		}

		section "Connection" {

			F init(c:Connection, sock:Int) {
				c.sock = sock
				c.user = {} # For user data
				# c.pipeline is not here as expecting to change COR::Pipeline() call to have client/server specific arguments
			}

			F init(c:ClientConnection, client:Client, sock:Int) {
				super(c, sock)
				c.client = client
				c.pipeline = COR::Pipeline(ConnectionPipelineDelegate(c))
				c.user = {} # For user data
			}

			F init(c:ServerConnection, server:Server, sock:Int) {
				super(c, sock)
				c.server = server
				c.pipeline = COR::Pipeline(ConnectionPipelineDelegate(c))
				c.user = {} # For user data
			}

			global close
			F close(c:Connection) c.sock.close()

			global send
			F send(c:Connection, data:Str) c.sock.send(data)

			F Connection(c:Client, sock:Int) ClientConnection(c, sock)
			F Connection(s:Server, sock:Int) ServerConnection(s, sock)
		}

		section "ConnectionDelegate" {
			type ConnectionDelegate

			global on_connect
			F on_connect(ch:ConnectionDelegate, c:Connection) {
				debug('server', 'ConnectionDelegate on_connect()')
				ch.connection = c
			}

			global on_data
			F on_data(ch:ConnectionDelegate, data:Str) {
				debug('server', 'ConnectionDelegate on_data()')
			}

			global on_remote_close
			F on_remote_close(ch:ConnectionDelegate) {
				debug('server', 'ConnectionDelegate on_remote_close()')
				ch.connection.close()
			}
		}

		section "ServerDelegate" {
			type ServerDelegate
			# F init(sd:ServerDelegate) throw InvalidArgument()
			# F init(sd:ServerDelegate, make_connection_handler:Fun) init(args())

			global on_listen
			F on_listen(sd:ServerDelegate, s:Server) {
				debug('server', 'ServerDelegate on_listen()')
			}

			global on_connect
			F on_connect(sd:ServerDelegate, c:Connection) {
				debug('server', 'ServerDelegate on_connect()')
				throw NotImplemented("on_connect(ServerDelegate) is not implemented in a subtype")
			}

			global on_end
			F on_end(sd:ServerDelegate, s:Server) {
				debug('server', 'ServerDelegate on_end()')
			}

		}

		section "ThreadedServerDelegate" {
			type ThreadedServerDelegate(ServerDelegate)

			F on_connect(sd:ThreadedServerDelegate, c:Connection) {
				debug('server', 'ThreadedServerDelegate on_connect()')

				# TODO: join the thread / use Executor
				Thread("connection-${c.id}", {
					try {
						debug('server', 'ThreadedServerDelegate on_listen() - new thread')
						c.pipeline.fire(IO::events::Active())
						debug('server', 'ThreadedServerDelegate on_listen() - after IO::events::Active')
						while true {
							data = recvfrom(c.sock, 1024, 0, c_sockaddr_un())
							if data == '' {
								debug('server', 'ThreadedServerDelegate Remote closed connection')
								c.pipeline.fire(IO::events::Inactive())
								break
							}
							debug('server', "ThreadedServerDelegate data -- ${data.SafeStr().limit(1024)}")
							c.pipeline.fire(IO::events::Read(data))
							debug('server', "ThreadedServerDelegate on_connect -- after handler.on_data()")
						}
					} catch(e) {
						debug('server', "ThreadedServerDelegate before logging")
						log("ThreadedServerDelegate - exception in thread: ${e}")
						debug('server', "ThreadedServerDelegate after logging")
						guard false
					}
				})
			}

		}

		section "UnixStreamServer" {
			F listen(uss:UnixStreamServer, path:Str, sd:ServerDelegate) {
				id = 1
				sock = socket(C_PF_UNIX, C_SOCK_STREAM)
				uss.sock = sock
				debug('server', "Sock: ${sock}")
				$(ok:[0, 1] rm $path)
				bind(sock, c_sockaddr_un(path))
				remote_addr = c_sockaddr_un()
				listen(sock, 5)
				sd.on_listen(uss)
				while true {
					accepted = accept(sock, remote_addr)
					debug('server', "Connection socket: ${accepted}")
					c = Connection(uss, accepted).set('id', id)
					id += 1
					debug('server', 'Calling delegate on_connect')
					sd.on_connect(c)
					debug('server', 'After delegate on_connect')
					# TODO: how to break the loop?
				}
				sd.on_end(uss)
			}
		}


		F test_un_server() {

			type MyDelegate(ThreadedServerDelegate)

			type MyHandler(COR::Handler)

			global on_connect
			F on_connect(md:MyDelegate, c:Connection) {
				c.pipeline.push(IO::handlers::Splitter("\n"))
				c.pipeline.push(MyHandler())
				super(md, c)
			}
			md = MyDelegate()

			global handle
			F handle(mh:MyHandler, hc:COR::HandlerContext, r:IO::events::Read) {
				hc.fire(IO::events::Write(r.data + "\n"))
			}


			net::UnixStreamServer().listen("sock_test", md)
		}

		# TODO: Fix for COR
		F unix_json_rpc_server(path:Str, events:Namespace) {
			sd = net::ThreadedServerDelegate(F on_connect() {
				F make_json_rpc_handler() {
					debug('server', 'make_json_rpc_handler()')
					net::JsonRpcConnectionHandler(events)
				}
				net::LinesConnectionDelegate(make_json_rpc_handler)
			})
			log("JSON RPC server is starting to listen on Unix socket ${path}")
			net::UnixStreamServer().listen(path, sd)
		}

		# DEBUG=server ngs -pi 'net::test_un_server()'
		# echo wwwxyz | nc -U build/sock_test

		section "ClientDelegate" {
			type ClientDelegate

			global on_connect
			F on_connect(cd:ClientDelegate, c:Connection) {
				debug('client', 'ClientDelegate on_connect()')
			}

			global on_data
			F on_data(cd:ClientDelegate, data:Str) {
				debug('client', 'ClientDelegate on_data()')
			}

			global on_remote_close
			F on_remote_close(cd:ClientDelegate) {
				debug('client', 'ClientDelegate on_remote_close()')
			}
		}

		section "UnixStreamClient" {
			F connect(usc:UnixStreamClient, path:Str, cd:ClientDelegate) {
				sock = socket(C_PF_UNIX, C_SOCK_STREAM)
				usc.sock = sock
				connect(sock, c_sockaddr_un(path))
				c = Connection(usc, sock)
				cd.on_connect(c)
				while true {
					data = recvfrom(sock, 1024, 0, c_sockaddr_un())
					if data == '' {
						cd.on_remote_close()
						break
					}
					cd.on_data(data)
				}
			}
		}
	}
}

