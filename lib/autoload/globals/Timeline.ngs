ns {

	# WIP - timeline, mainly for UI

	global Time, Lines, init, each, map, sort, push, echo_cli

	doc time_start - Time
	doc time_last_update - Time
	doc time_end - Null or Time
	doc data - Any
	doc error - AnyOf(Str, Lines)
	type Timeline


	section "Item" {

		doc time - Time
		type Item

		F init(ti:Item) throw InvalidArgument("Item() was called without arguments")

		F init(ti:Item, time:Time=null) {
			ti.id = "ti-${`line: uuidgen`}" # temporary
			ti.time = time
		}

		F Time(ti:Item) ti.time

		F pushed_into(ti:Item, t:Timeline) null
	}

	section "GroupItem" {

		type GroupItem(Item)

		F init(gi:GroupItem) {
			super(gi)
			gi.items = []
			gi.meta().timeline = null
		}

		F push(gi:GroupItem, ti:Item) gi::{
			if not(gi.items) {
				gi.time = ti.time
			}
			gi.items.push(ti)
			gi.meta().timeline.Box().each(incr_version)
		}

		F pushed_into(gi:GroupItem, t:Timeline) {
			gi.meta().timeline = t
		}
	}

	section "ResultItem" {

		type ResultItem(Item)

		F init(ti:ResultItem, time:Time, result) {
			super(ti, time)
			ti.result = result
		}
	}

	section "TextualCommandItem" {

		type TextualCommandItem(Item)

		F init(ti:TextualCommandItem) throw InvalidArgument("TextualCommandItem() was called without arguments")

		F init(ti:TextualCommandItem, time:Time, command:Str) {
			super(ti, time)
			ti.command = command
		}
	}

	section "Timeline" {

		F init(t:Timeline) {
			t.id = "tl-${`line: uuidgen`}" # temporary
			t.version = 1  # TODO: make sure it's thread safe
			t.name = '(unnamed)'
			t.status = 'TODO'
			t.error = null
			t.time_start = null
			t.time_last_update = null
			t.time_end = null
			t.data = null
			t.items = []
		}

		F init(t:Timeline, items:Arr) {
			super(t)
			t.items = items
			t.sort()
		}

		F incr_version(t:Timeline) {
			# TODO: lock?
			t.version += 1
		}

		F push(t:Timeline, ti:Item) t::{
			A.items.push(ti)
			A.sort() # TODO: insert in the correct place, keeping .items sorted by time
			# TODO: maximize time_last_update and time_end into t
			# TODO: minimize time_start into t
			ti.pushed_into(t)
			t.incr_version()
		}

		F each(t:Timeline, cb:Fun) t::{A.items.each(cb)}
		F map(t:Timeline, mapper:Fun) t.items.map(mapper)
		F sort(t:Timeline) t::{ A.items .= sort(F(a, b) a.Time() <= b.Time()) }
		F Time(t:Timeline) t.time_end or t.time_last_update or t.time_start


		section "Lines(Timeline)" {

			type _Ctx
			F init(ctx:_Ctx) {
				ctx.depth = 0
			}

			F _pfx(ctx:_Ctx) "    " * ctx.depth
			F _deeper(ctx:_Ctx, n:Int=1) ctx.copy()::{ A.depth += n }

			F Lines(t:Timeline, ctx:_Ctx) {
				dp = ctx._deeper()._pfx()
				collector {
					collect(ctx._pfx() + "${t.Type().name}: ${t.name}")
					for k in %[id time_start time_last_update time_end status error] {
						k == 'time_last_update' and t.time_last_update == t.time_end continues
						k == 'time_end' and t.time_end is Null continues
						if k == 'error' {
							t.error is Null continues
							t.error.Lines().each(F(line) collect(dp + "${k}: ${line}"))
							continue
						}
						collect(dp + "${k}: ${t.(k)}")
					}
					# collect(dp + Str(t.data))
					if(t.items) {
						collect(dp + "items: ${t.items.len()}")
					}
				} + t.items.map(F(sub_timeline) Lines(sub_timeline, ctx._deeper(2))).flatten()
			}

			F Lines(t:Timeline) Lines(Lines(t, _Ctx()))

		}
	}

	F echo_cli(t:Timeline) {
		t.Lines().echo()
	}

}