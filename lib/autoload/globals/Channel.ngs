ns {
	global init, on_start
	global on_read, on_read_error, on_read_end
	type Handler

	# F on_read(h:Handler, data)
	# F on_read_error(h:Handler, e:Error)
	# F on_read_end(h:Handler)

	type Pipeline
	F init(p:Pipeline, handlers:Arr) {
		p.handlers = handlers
		prev = null
		handlers.each(F(handler) {
			handler.pipeline = p
			if prev is not Null {
				prev.next = handler
				# handler.prev = prev
			}
			prev = handler
		})
	}

	F start(p:Pipeline) {
		p.handlers[0].on_start()  # doubt
	}

	type FileReaderHandler

	F init(frh:FileReaderHandler, f:File) {
		fd = c_open(f.path, 'r')
		fd <= 0 throws FileIOFail("Failed to open the file ${f.path}").set('file', f)
		frh.fd = fd
	}

	F on_start(frh:FileReaderHandler) {
		frh::next.on_read_start()
		while true {
			data = frh.fd.read(4096)
			not(data) breaks
			frh::next.on_read(data)
		}
		frh::next.on_read_end()
	}

	type LinesHandler
	F init(lh:LinesHandler) {
		lh.buf = ''
	}

	F on_read_start(lh:LinesHandler) {
		lh::next.on_read_start()

	}

	# TODO: something more efficient
	F on_read(lh:LinesHandler, buf:Str) {
		lh.buf += buf
		while true {
			# TODO: start the search from previous position
			# TODO: handle "\r\n"
			p = pos(lh.buf, "\n")
			p == null breaks
			line = lh.buf[0..p]
			# echo("LINE << $line >>")
			lh::next.on_read(line)
			# TODO: emit
			lh.buf = lh.buf[(p+1)..null]
		}
	}

	F on_read_end(lh:LinesHandler) {
		if lh.buf {
			lh::next.on_read(lh.buf)
			lh.buf = ''
		}
		lh::next.on_read_end()
	}

	type MyPrinter
	F on_read_start(mp:MyPrinter) echo("MyPrinter --- start")
	F on_read(mp:MyPrinter, line) echo("MyPrinter ${line}")
	F on_read_end(mp:MyPrinter) echo("MyPrinter --- end")

	# ngs -pi 'Channel::test()'
	F test() {
		p = Pipeline([FileReaderHandler(File("vm.c")), LinesHandler(), MyPrinter()])
		p.start()
	}
}