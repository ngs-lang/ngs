# experimental Semantic AWS library

ns {
	global init, Str, JsonData

	# Poorly named hack for UI
	type SendAllFields

	# TODO: consider showing sources and revisions together

	# TODO: ensure alignment with AWS output
	type Source(SendAllFields)
	F init(s:Source, repo:Str, branch:Str) init(args())
	F Str(s:Source) "${s.repo}@${s.branch}"
	F JsonData(s:Source) s.Hash().JsonData()

	# TODO: ensure alignment with AWS output
	type Action(SendAllFields)
	F init(a:Action, stage_name:Str, action_name:Str, status:Str) init(args())
	F Str(a:Action) "${a.stage_name}/${a.action_name}: ${a.status}"
	F JsonData(a:Action) a.Hash().JsonData()

	# TODO: ensure alignment with AWS output
	type Revision(SendAllFields)
	F init(r:Revision, action_name:Str, id:Str, message:Str) init(args())
	F Str(r:Revision) "${r.action_name}: ${r.id.limit(8)} ${r.message.limit(30).replace('\n', ' ')}"
	F JsonData(r:Revision) r.Hash().JsonData()

	# TODO: "not applicable or unknown" subtype
	# TODO: "N out of M" subtype (that's what current Progress is)
	type Progress(SendAllFields)
	F init(p:Progress, step:Int, total_steps:Int) init(args())
	F Str(p:Progress) "${p.step}/${p.total_steps}"
	F JsonData(p:Progress) p.Hash().JsonData()

	# Messes semantics and UI hints?
	type LongStr(SendAllFields)
	F init(ls:LongStr, val:Str) init(args())
	F Str(ls:LongStr) ls.val.Arr().digest(4).join('')
	F JsonData(ls:LongStr) ls.val.JsonData()

	section "Pipeline" {
		# Warning: for unique reference should have AWS account and region
		# AWS::CodePipeline::Pipeline
		type Pipeline
		F init(p:Pipeline, name:Str) {
			p.name = name
		}

		F Str(p:Pipeline) p.name
		F JsonData(p:Pipeline) p.name
	}

	F pipes() {
		# List of AWS::CodePipeline::Pipeline
		pipelines = ``aws codepipeline list-pipelines``
		pipelines.pmap(4, F(p) {
			e = ``aws codepipeline list-pipeline-executions --pipeline-name ${p.name} --max-results 1``.get(0, {})

			# TODO: eliminate e.attr references outside this if
			if e {
				pipeline = ``aws codepipeline get-pipeline --name ${p.name}``
				state = ``aws codepipeline get-pipeline-state --name ${p.name}``

				section "approvals" {
					approval_actions = collector {
						pipeline.stages.each(F(stage) {
							stage.actions.filter({'actionTypeId': {'category': 'Approval', 'provider': 'Manual'}}).each(F(action) {
								status = 'ahead'
								state =~ Present({
									"latestExecution": {
										"pipelineExecutionId": e.pipelineExecutionId
									}
									"stageName": stage.name
									"actionStates": Present({"actionName": action.name} -> { status = A.latestExecution.status })
								})
								collect(Action(stage.name, action.name, status))
							})
						})
					}
				}
			} else {
				approval_actions = []
			}

			section "sources" {
				sources = collector {
					pipeline.stages.each(F(stage) {
						stage.actions.filter({'actionTypeId': {'category': 'Source', 'provider': 'CodeStarSourceConnection'}}).each(F(action) {
							collect(Source(action.configuration.FullRepositoryId, action.configuration.BranchName))
						})
					})
				}
			}

			section "progress" {
				# TODO
				total_actions = pipeline.stages.actions.flatten().len()

				# TODO: make sure that not matching Repeat(HERE) does not affect the counting
				statuses = collector/Stats({'Succeeded': 0}) {
					state =~ Repeat({
						"latestExecution": {
							"pipelineExecutionId": e.pipelineExecutionId
						}
						"actionStates": Repeat({"latestExecution": {"status": collect}})
					})
				}
			}


			{
				'name': Pipeline(p.name)
				'status': AbstractProcess::Status::Status(e.status)
				'sources': sources
				'revisions': e.sourceRevisions.map(F(r) Revision(r.actionName, r.revisionId, r.revisionSummary.CommitMessage))
				'last_executed': e.lastUpdateTime
				'approvals': approval_actions
				'progress': if statuses { Progress(statuses.Succeeded, total_actions) }
			}
		})
	}

	F stacks(pat:Hash={}) {
		``aws cloudformation describe-stacks``.filter({'StackStatus': Not('DELETE_COMPLETE')} + pat).map(F(stack) {
			# TODO: something more elegant here
			stack.mapkv({
				A =~ 'StackName' returns [A, B]
				B is not Str returns [A, B]
				[A, LongStr(B)]
			})
		})
	}

}


