doc Linked list.
type List(Eachable1)

	doc Initialize empty List
	F init(l:List) {
		l.head = null
		l.tail = null
	}

	doc Initialize List with items from e
	F init(l:List, e:Eachable1) {
		init(l)
		l.push_all(e)
	}

	doc Get length of the List. O(n).
	doc %RET - Int
	F len(l:List) {
		n = 0
		for(item = l.head; item; item .= next) {
			n += 1
		}
		n
	}

	doc Call cb with consecutive items from the List
	doc %RET - l
	F each(l:List, cb:Fun) {
		for(item = l.head; item; item .= next) {
			cb(item.val)
		}
		l
	}

	doc Check whether the list is empty
	F Bool(l:List) l.head != null

	doc Represent List as string
	doc %RET - Str with length, head and tail items of the List
	F Str(l:List) "<${l.Type().name} ${l.hash()} length:${l.len()} head=${l.head} tail=${l.tail}>"

doc Exception to be thrown when trying to obtain an item from an empty List
type EmptyListFail(Error)

	F init(f:EmptyListFail, l:List) {
		super(f, "Could not retrieve element from empty list")
		f.set('list', l)
	}


ns {
	global init, push, pop, shift, unshift, Bool, Str

	doc %STATUS - internal
	type ListItem

	doc %STATUS - internal
	F init(qi:ListItem, val, prev, next) init(args())

	doc Append item to the end of the List
	F push(l:List, val) {
		qi = ListItem(val, l.tail, null)
		if l {
			l.tail.next = qi
			l.tail = qi
		} else {
			l.head = qi
			l.tail = qi
		}
		l
	}

	doc Remove item from the end of the List. Throws EmptyListFail if the List is empty.
	F pop(l:List) {
		not(l) throws EmptyListFail(l)
		ret = l.tail.val
		l.tail .= prev
		if l.tail {
			l.tail.next = null
		} else {
			l.head = null
		}
		ret
	}

	doc Remove item from the beginning of the List. Throws EmptyListFail if the List is empty.
	F shift(l:List) {
		not(l) throws EmptyListFail(l)
		ret = l.head.val
		l.head .= next
		if l.head {
			l.head.prev = null
		} else {
			l.tail = null
		}
		ret
	}

	doc Prepend item to the List.
	F unshift(l:List, val) {
		qi = ListItem(val, null, l.head)
		if l {
			l.head.prev = qi
			l.head = qi
		} else {
			l.head = qi
			l.tail = qi
		}
		l
	}

	doc %RET - true
	doc %STATUS - internal
	F Bool(li:ListItem) true

	doc Represent ListItem as a string
	F Str(li:ListItem) "<${li.Type().name} ${li.val}>"

	global inspect
	doc Inspect list item. Does not inspect .prev and .next values to avoid circular inspection.
	F inspect(path:Arr, li:ListItem) {
		["${_inspect_path_to_str(path)} - ${li.Type().name}"] + inspect(path + ["val"], li.val) + %[prev next].map(F(field) {
			"${_inspect_path_to_str(path)}.${field} - ${if li.(field) then 'not null' else 'null'}"
		})
	}

}

TEST l=List([1,2,3]); l.push(4); x=l.shift(); x == 1 and Arr(l) == [2, 3, 4]
TEST l=List([1,2,3]); l.unshift(0); x=l.pop(); x == 3 and Arr(l) == [0, 1, 2]
TEST { List().pop() }.assert(EmptyListFail)
TEST { List().shift() }.assert(EmptyListFail)
TEST List().each({ assert(false) }) == List()
